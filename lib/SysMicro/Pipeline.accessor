# -*- cperl -*-

use Graph::Directed;

#------------------------------------------------------------------------

=item public WorkflowMask getWorkflowMask();

Returns the workflow mask for this pipeline.

=cut
#------------------------------------------------------------------------
  sub getWorkflowMask {
    return SysMicro::WorkflowMask->new($_[0]->{pipeline_workflowmask});
  }

#------------------------------------------------------------------------

=item public WorkflowMask getRawWorkflowMask();

Returns the string for the workflow mask for this pipeline. Useful
when you dont want to pay to load the YAML object.

=cut
#------------------------------------------------------------------------
  sub getRawWorkflowMask { return $_[0]->{pipeline_workflowmask}; }
    
#------------------------------------------------------------------------

=item public [ClusterInput] getInputs();

Returns the inputs for the pipeline after filtering out those produced
by other components.

=cut
#------------------------------------------------------------------------
  sub getInputs { return SysMicro::PipelineInput->query( Pipeline => shift ); }

#------------------------------------------------------------------------

=item public [ClusterOutput] getOutputs();

Returns the output files for this pipeline.

=item public [ClusterOutput] getOutputs(%args);

Returns the output files for this pipeline. The following args are available.

  Visibility

=cut
#------------------------------------------------------------------------
  sub getOutputs {

    my ($self, %args) = @_;

    $args{Component} = $self->getComponents;

    return SysMicro::ClusterOutput->query( %args );
  }

#------------------------------------------------------------------------

=item public [{ Cluster => $cluster, Output => [ClusterOutput]}] getOutputsByCluster();

Returns the output files for this pipeline.

=item public [{ Cluster => $cluster, Output => [ClusterOutput]}] getOutputsByCluster( %args );

Returns the output files for this pipeline. The following args are available.

   Visibility

=cut
#------------------------------------------------------------------------
  sub getOutputsByCluster {

    my ($self, %args) = @_;

    my @results;
    
    foreach my $cluster ( @{$self->getClusters} ) {

      my @outputs;
      
      foreach ( @{SysMicro::Component->query( Cluster => $cluster )} ) {
	push @outputs, @{SysMicro::ClusterOutput->query( Component => $_, %args )};
      }
      
      @outputs and push @results, { Cluster => $cluster, Output => \@outputs };
    }

    return \@results;
  }

