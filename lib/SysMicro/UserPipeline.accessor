# -*- cperl -*-
#------------------------------------------------------------------------

=item public ParameterMask getParameterMask();

Returns the parameter mask for this pipeline.

=cut
#------------------------------------------------------------------------
  sub getParameterMask {
    return SysMicro::ParameterMask->new($_[0]->{userpipeline_parametermask});
  }

#------------------------------------------------------------------------

=item public ParameterMask getRawParameterMask();

Returns the string for the parameter mask for this pipeline. Useful
when you dont want to pay to load the YAML object.

=cut
#------------------------------------------------------------------------
  sub getRawParameterMask { return $_[0]->{userpipeline_parametermask}; }

#------------------------------------------------------------------------

=item public GlobalPipeline getGlobalTemplate();

Returns the GlobalPipeline that this UserPipeline is ultimated
templated on.

=cut
#------------------------------------------------------------------------
  sub getGlobalTemplate {
    
    my $template = shift->getTemplate;

    if ( $template->isa( 'SysMicro::GlobalPipeline' ) ) {
      return $template;
    }
    return $template->getGlobalTemplate;
  }

#------------------------------------------------------------------------

=item public [Workflow] getWorkflow();

Returns the Workflow objects associated with this pipeline.

=cut
#------------------------------------------------------------------------
  sub getWorkflow { shift->getTemplate->getWorkflow; }

#------------------------------------------------------------------------

=item public [Cluster] getClusters();

Convenience method to return a list of clusters activated in this
pipeline.

=cut
#------------------------------------------------------------------------
  sub getClusters {

    my $self = shift;
  
    my $dis_clusters = $self->getWorkflowMask->getDisabledClusters;
    my $clusters = $self->getGlobalTemplate->getClusters;

    return [grep { ! exists $dis_clusters->{ $_->getName } } @$clusters];
  }

#------------------------------------------------------------------------

=item public [Component] getComponents();

Return a list of activated components in this pipeline.

=item public [Component] getComponents(Cluster $cluster);

Return a list of activated components in cluster of the pipeline.

=cut
#------------------------------------------------------------------------
  sub getComponents {

    my ($self, $cluster) = @_;

    my $components = [];
    my $template = $self->getGlobalTemplate();
    my $wf_mask = $self->getWorkflowMask;

    # if we are given a cluster and it is part of our pipeline check for components
    if ( $cluster and SysMicro::Workflow->exists(Cluster => $cluster, Pipeline => $template) ) {

      # if the cluster isn't disabled, grab all the components
      my $dis_clusters = $wf_mask->getDisabledClusters;
      exists $dis_clusters->{ $cluster->getName } 
	or $components = SysMicro::Component->query( Cluster => $cluster );
	
    } else {
      $components = SysMicro::Component->query( Cluster => $self->getClusters );
    }

    
    my %off_components = %{$wf_mask->getDisabledComponents};
    my %orp_components = %{$wf_mask->getOrphanedComponents};
    @off_components{ keys %orp_components} = 'orphaned';
    
    return [grep { ! exists $off_components{ $_->getName } } @$components];
  }

#------------------------------------------------------------------------

=item public string getImage();

Returns the path to the base image for this workflow.

=cut
#------------------------------------------------------------------------
  sub getImage { shift->getTemplate->getImage; }

#------------------------------------------------------------------------

=item public string getLayout();

Returns the pipeline layout for the template used to create this pipeline.

=cut
#------------------------------------------------------------------------
  sub getLayout { shift->getTemplate->getLayout; }


#------------------------------------------------------------------------

=item public ComponentBuilder getComponentBuilder(Component $component);

Returns a component builder with this objects parameter mask applied.

=cut
#------------------------------------------------------------------------
  sub getComponentBuilder {
    my ($self, $component) = @_;
    return SysMicro::ComponentBuilder->new( $component, $self->getParameterMask );
  }
