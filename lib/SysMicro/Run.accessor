# -*- cperl -*-

use Archive::Tar;
use File::Basename;

#------------------------------------------------------------------------

=item public [RunCluster] getClusters();

Retrieves the RunClusters for this Run.

=cut
#------------------------------------------------------------------------
sub getClusters { SysMicro::RunCluster->query( Run => shift ); }

#------------------------------------------------------------------------

=item public [RunOutput] getOutput();

Retrieves the RunOutputs for this Run.

=cut
#------------------------------------------------------------------------
sub getOutput { SysMicro::RunOutput->query( Run => shift ); }


#------------------------------------------------------------------------

=item public [RunInput] getInput();

Retrieves the RunInputs for this Run.

=cut
#------------------------------------------------------------------------
sub getInputs { SysMicro::RunInput->query( Run => shift ); }

#------------------------------------------------------------------------

=item public [File] getInputFiles();

Retrieves the Files associated as input to this run. This method will
return the contents of collections rather than the collections
themselves.

=cut
#------------------------------------------------------------------------
sub getInputFiles {

  my $self = shift;

  my @files;

  foreach (@{$self->getInputs}){
    push @files, @{$_->getFileResource->getContents};
  }

  return \@files;
}

#------------------------------------------------------------------------

=item public [string] getInputFileNames();

Retrieves the RunInput FileResource usernames for this Run.

=cut
#------------------------------------------------------------------------
sub getInputFileNames {

  my $self = shift;

  my @input_names = map { $_->getUserName } @{$self->getInputFiles};
  return \@input_names;
}

#------------------------------------------------------------------------

=item public bool isRunning();

Returns true if the pipeline is still running and false if it is
complete or canceled.

=cut
#------------------------------------------------------------------------
sub isRunning {

  my $self = shift;
  
  my $status = $self->getStatus;
  $status eq 'Complete' and return 0;
  $status eq 'Canceled' and return 0;
  return 1;
}
