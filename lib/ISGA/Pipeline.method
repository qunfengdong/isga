# -*- cperl -*-

#------------------------------------------------------------------------

=item PRIVATE string uploadInputFile(FileHandle, %ARGS);

Uploads an input file into the repository.

Named Arguments:

 PipelineInput => PipelineInput
 UserName => string
 Description => string

=cut
#------------------------------------------------------------------------
  sub uploadInputFile {
    
    my ($self, $fh, %args) = @_;
    
    # extract Pipeline input
    my $pi = $args{PipelineInput};
    delete $args{PipelineInput};

    # set format and type
    $args{Format} = $pi->getFormat;
    $args{Type} = $pi->getType;
    
    # call back for checking upload
    $args{Filters} = $self->getGlobalTemplate->verifyUpload($args{UserName}, $pi);   

    ISGA::File->upload( $fh, %args );
  }

#------------------------------------------------------------------------

=item public int _icmp(Pipeline this, Pipeline that, boolean reversed);

Compares the two pipelines based on their ids.

=item public int _icmp(Pipeline this, int that, boolean reversed);

Compares this pipelines to an integer assumed to tbe the key for an object.

=cut
#------------------------------------------------------------------------
  sub _icmp {

    # read in arguments
    my ($this, $that, $reversed) = @_;

    # die if that is an object and not the same type as this
    if ( ref $that and ! UNIVERSAL::isa($that, 'ISGA::Pipeline') ) {
      my $type = ref($this);
      X::API::Compare->throw( "Compare requires $type objects" );
      
    } elsif ( $that !~ /^-?\d+$/ ) {
      X::API::Compare->throw( 'Compare requires SCALAR to be int' );
    }
    
    $reversed and ($this, $that) = ($that, $this);
    
    return ( ref($this) ? $this->getId() : $this ) <=> ( ref($that) ? $that->getId() : $that );
  }
  
#------------------------------------------------------------------------

=item public int _scmp(Pipeline this, Pipeline that, boolean reversed);

Compares the two pipelines based on their names.

=item public int _scmp(IndexedObject this, int that, boolean reversed);

Compares this object to a string assumed to be the key for an object.

=cut
#------------------------------------------------------------------------
  sub _scmp {

    # read in arguments
    my ($this, $that, $reversed) = @_;
    
    # die if that is an object and not the same type as this
    if ( ref $that and ! UNIVERSAL::isa($that, 'ISGA::Pipeline') ) {
      my $type = ref($this);
      X::API::Compare->throw( "Compare requires $type objects" );
    }

    $reversed and ($this, $that) = ($that, $this);
    
    return (ref($this) ? $this->getId() : $this ) cmp ( ref($that) ? $that->getId() : $that );
  }
