# -*- cperl -*-

use File::Path qw( remove_tree );

#------------------------------------------------------------------------

=item ABSTRACT void installTranscriptomeData();

Unimplemented stub

=cut 
#------------------------------------------------------------------------
sub installTranscriptomeData { X::API::UnrealizedMethod->throw( class => 'ISGA::Run', method => 'installTranscriptomeData' ); }

#------------------------------------------------------------------------

=item ABSTRACT void deleteTranscriptomeData();

Unimplemented stub

=cut 
#------------------------------------------------------------------------
sub deleteTranscriptomeData { X::API::UnrealizedMethod->throw( class => 'ISGA::Run', method => 'deleteTranscriptomeData' ); }

#------------------------------------------------------------------------

=item PRIVATE void _initializeOutputs(RunBuilder $rb);

Creates placeholders for all expected pipeline outputs.

=cut 
#------------------------------------------------------------------------
sub _initializeOutputs {

  my ($self, $rb) = @_;

  foreach my $cluster ( @{$rb->getPipeline->getClusters} ) {

    foreach my $component ( @{$rb->getComponents($cluster)} ) {
      
      foreach ( @{ISGA::ClusterOutput->query( Component => $component )} ){
	next if $_->getVisibility ne 'Pipeline';
	ISGA::RunOutput->create( Run => $self, ClusterOutput => $_ );
      }
    }
  }
}

#------------------------------------------------------------------------

=item PRIVATE void _initializeClusters(RunBuilder $rb);

Creates table entries for the clusters we will run.

=cut 
#------------------------------------------------------------------------
sub _initializeClusters {

  my ($self, $rb) = @_;

  my $incomplete = ISGA::RunStatus->new( Name => 'Incomplete' );

  my $p = $self->getType;

  foreach my $cluster ( @{$p->getClusters} ) {
    
    my %args = ( Run => $self, Cluster => $cluster, Status => $incomplete );
    
    if ( my $iterations = $rb->getIterationCount($cluster) ) {      
      $args{Iterations} = $iterations;
    }

    ISGA::RunCluster->create( %args );
  }
}

#------------------------------------------------------------------------

=item PRIVATE void _getCurrentStatus();

Retrieves the current status of components in the Run

=cut 
#------------------------------------------------------------------------
  sub _getCurrentStatus {

    my $self = shift;

    my %finished;
    my @working;   

    foreach my $run_cluster ( @{ISGA::RunCluster->query( Run => $self )} ) {

      my $components = $run_cluster->getComponents();

      if ( $run_cluster->getStatus eq 'Complete' ) {
	map {$finished{ $_->getErgatisName }++} @$components;
	
      } else {
	push @working, [ $run_cluster, $components ];
      }
    }

    return [\%finished, \@working];
  }
      
#------------------------------------------------------------------------

=item public void updateStatus();

Updates the run status by parsing the ergatis pipeline.xml. This will
update the run status, as well as pull information for clusters and
outputs.

=cut
#------------------------------------------------------------------------
  sub updateStatus {
    
    my $self = shift;

    my $status = $self->getStatus;
    return if $status eq 'Complete';

    my ($finished, $working) = @{$self->_getCurrentStatus};
    my $ergatis_status = ISGA::ErgatisRunStatus->new( $self, $finished );    
    my $new_status = ucfirst( $$ergatis_status{'start pipeline:'}->{state} );
    
    $new_status ||= "Submitting";  

    # go through each cluster
    $_->[0]->updateStatus($ergatis_status, $_->[1]) for @$working;
      
    eval {

      ISGA::DB->begin_work();

      $new_status eq $status or
	$self->edit( Status => ISGA::RunStatus->new( Name => $new_status ) );
      
      if ( $new_status eq 'Complete' ) {
	$self->edit( FinishedAt => $ergatis_status->{'start pipeline:'}->{'endTime'}) or X::API->throw("Did not properly parse pipeline.xml for endTime.");
        $self->writeAnalysisYaml() if $self->hasRunAnalysis();
      }

      ISGA::DB->commit();

    };
    
    if ( $@ ) {
      ISGA::DB->rollback();
      
      my $e = ( X->caught() ? $@ : X::Dropped->new(error => $@) );    
      $e->rethrow();
    }  
  }

#------------------------------------------------------------------------

=item public void purge();

This method will remove the evidence level results and other data that
isn't tagged to be stored indefinitely.

=cut
#------------------------------------------------------------------------
  sub purge {

    my $self = shift;

    my $id = $self->getErgatisKey;

    foreach ( @{ISGA::RunCluster->query( Run => $self )} ) {
      $_->purge();
    }

    # remove the pipeline entry in the Ergatis runtime
    remove_tree( $self->getType->getErgatisRuntimeDirectory . "/$id" );
    
    # nuke raw evidence download if it exists
    my ($red) = @{ISGA::RunEvidenceDownload->query( Run => $self )};
    $red and $red->delete();

    # update raw data status
    $self->edit( RawDataStatus => 'Deleted' );
  }

#------------------------------------------------------------------------

=item public void writeProtocol(string $protocol, string $run_name);

This method writes the run protocol to disk and saves it to the run collection.

=cut
#------------------------------------------------------------------------
sub writeProtocol {

  my ($self, $protocol, $name) = @_;

  my %args = ( Type => ISGA::FileType->new( Name => 'Run Protocol'),
               Format => ISGA::FileFormat->new( Name => 'HTML' ),
               IsHidden => 1, UserName => $name . ' Run Protocol',
               CreatedAt => ISGA::Timestamp->new(),
               CreatedBy => ISGA::Login->getAccount,
               ExistsOutsideCollection => 1, Description => 'Protocol for ' . $name );
  
  # write it to disk
  my $fh = File::Temp->new(DIR => ISGA::SiteConfiguration->value('local_tmp'));
  print $fh $protocol;
  seek($fh,0,0);

  my $file = ISGA::File->addToRepository( $fh, %args );
  my $file_collection = $self->getFileCollection;

  my $next_index = ISGA::FileCollectionContent->exists( FileCollection => $file_collection );

  ISGA::FileCollectionContent->create( FileCollection => $file_collection,
                                       FileResource => $file,
                                       Index => $next_index++
                                     );
}

#------------------------------------------------------------------------

=item public void writeAnalysisYaml(RunBuilderInput $rbi);

This method creates the end of Run analysis and writes it to a yaml file.

=cut
#------------------------------------------------------------------------
sub writeAnalysisYaml {
  X::API->throw( message => "Pipeline does not have any post run analysis to perform.\n" );
}

