# -*- cperl -*-

#------------------------------------------------------------------------

=item public void writeConfigFile( RunBuilder $rb, ParameterMask $mask, { ClusterInput => string } $cluster_inputs );

Write the config file for this component in support of an Ergatis run.

=item public void writeConfigFile( RunBuilder $rb, ParameterMask $mask, { ClusterInput => string } $cluster_inputs, int $iteration );

Write the $iteration-th config file for this component in support of an Ergatis run.

=cut
#------------------------------------------------------------------------
  sub writeConfigFile {

    my ($self, $rb, $mask, $cluster_inputs, $iteration) = @_;

    my $name = $self->getErgatisName . '.config';
    
    my %inputMask;

    # retrieve all inputs for this component and overlay inputs to pipeline
    foreach ( @{ISGA::ClusterInput->query( Component => $self )} ) {
      $inputMask{ '___' . $_->getName . '___' } 
	= exists $cluster_inputs->{$_} ? $cluster_inputs->{$_} : $_->getValue($rb);
    }  

    # read the template for the config file
    my $file = $self->getConfigFile;

    # do we copy our parameter mask from a different component
    my $build_component = $self->getCopyParameterMask || $self;

    if ( my $builder = ISGA::ComponentBuilder->new($build_component, $mask) ) {
      
      my %config;
 
      foreach ( @{$builder->getParameters} ) {
	
	my $command = '';
	my $value = $_->{VALUE};
	
	# if the parameter uses a command line flag, supply it here
	if ( defined $value ) {
	  $command = exists $_->{FLAG} ? "$_->{FLAG} $value" : "$value";
	}
	
	# add separating space to command if it already has a value
	if ( defined $config{$_->{CONFIGLINE}} ) {
	  $config{$_->{CONFIGLINE}} .= " $command";
      } else {
	$config{$_->{CONFIGLINE}} = $command;
      }
      }

    # if this is an iteration, we need to ninja-set the output token
      if ( $iteration ) {
	my ($token) = $name =~ /\.(\w+).config$/;
	$config{___output_token___} = $token;
      }

      while ( my ($key, $value) = each %config ) { $file =~ s/$key/$value/g; }
      
    }

    while ( my ($key, $value) = each %inputMask ) { $file =~ s/$key/$value/g; }      
    
    my $path = $rb->getFullErgatisPath . $name;

    ISGA::Utility->writeFile($path, $file);
  }
