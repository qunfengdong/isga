# -*- cperl -*-

use Digest::SHA;

#------------------------------------------------------------------------

=item public File upload(filehandle fh, Hash args);

Upload a file or file collection through the web interface. 

The args hash contains the following required parameters:

 UserName => string
 Type => FileType
 Format => FileFormat
 Description => string

The args hash may contain the following optional parameters:

 CreatedBy => Account (defaults to current acount)
 CreatedAt => Timestamp (defaults to current time)
 IsHidden => boolean ( defaults to FALSE)
 ExistsOutsideCollection => boolean (defaults to TRUE)


=cut 
#------------------------------------------------------------------------
  sub upload {

    my ($class, $fh, %args) = @_;

    # First we test to see if the file is compressed
    # if it is, pass it through the gzip filter and update the name
    my $username = $args{UserName};
    if ( $username =~ /\.(gz|gzip)$/) {
      binmode $fh, ':gzip';
      $username =~ s/\.(gz|gzip)$//;
      $args{UserName} = $username;
    }     

    # do we have verification callbacks
    if ( exists $args{Filters} ) {      
      $fh = $_->($fh) for @{$args{Filters}};
      delete $args{Filters};
    }
    
    # strip windows characters for text files
    if ( ! $args{Format}->isBinary() ) {
      $args{StripDosLineBreaks} = 1;
    }

    return $class->addToRepository($fh, %args);
  }
  

#------------------------------------------------------------------------

=item public File addToRepository(filehandle fh, Hash args);

Adds a file to the repository. User input should be passed to upload
to properly sanitize the file.

The args hash contains the following required parameters:

 UserName => string
 Type => FileType
 Format => FileFormat
 Description => string

The args hash may contain the following optional parameters:

 CreatedBy => Account (defaults to current acount)
 CreatedAt => Timestamp (defaults to current time)
 IsHidden => boolean ( defaults to FALSE)
 StripDosLineBreaks => boolean ( defaults to FALSE)

=cut 
#------------------------------------------------------------------------
  sub addToRepository {
    
    my ($class, $fh, %args) = @_;
    
    exists $args{IsHidden} or $args{IsHidden} = 0;
    exists $args{CreatedBy} or $args{CreatedBy} = ISGA::Login->getAccount;
    exists $args{CreatedAt} or $args{CreatedAt} = ISGA::Timestamp->new;
    exists $args{ExistsOutsideCollection} or $args{ExistsOutsideCollection} = 1;

    # process strip_line_breaks
    my $strip_dos_line_breaks = 0;
    if ( exists $args{StripDosLineBreaks} ) {
      $strip_dos_line_breaks = $args{StripDosLineBreaks};
      delete $args{StripDosLineBreaks};
    }

    # retrieve a name for this file
    my $name = Digest::SHA->new(256)->addfile($fh)->b64digest;
    $name =~ s/\+/-/go;
    $name =~ s/\//_/go;
    $args{Name} = $name;

    seek($fh,0,0);

    # grab the size of the file
    $args{Size} = (stat($fh))[7];

    # short circuit zero length files
    if ( $args{Size} == 0 ) {
      
      my ($file) = @{$class->query( Name => $name, UserName => $file->getUserName, CreatedBy => $args{CreatedBy} )};

      if ( $file ) {
	#if we add a single file, and previous copies are in collections make the file visible
	$args{ExistsOutsideCollection} and $file->edit(ExistsOutsideCollection => 1);	
	return $file;
      } else {
	return $class->create(%args);
      }
    }
    
    # check to see if the file is already in the system
    my ($file) = @{$class->query(Name => $name)};
    
    # the file doesn't exist, so we will create it in the filesystem
    if ( ! $file ) {
      $class->_write($fh, $name, $strip_dos_line_breaks);
      
      # otherwise we have a file with this hash in the system
    } else {
      
      # if the files aren't the same size, create a local copy to make
      # sure we aren't reading through a compressed fh
      if ( $args{Size} != $file->getSize ) { 
	my $layerstring = join('', PerlIO::get_layers($fh));
	$layerstring =~ /gzip/ or X::API->throw(error => 'File Hash Conflict');
      }
      
      # if the files have the same name and owner, don't add a new file.
      if ( $file->getCreatedBy == $args{CreatedBy} and $args{UserName} eq $file->getUserName ) {
	
	#if we add a single file, and previous copies are in collections make the file visible
	$args{ExistsOutsideCollection} and $file->edit(ExistsOutsideCollection => 1);
	
	return $file;
      }
    }
    
    # create the file
    return $class->create(%args);
  }

#------------------------------------------------------------------------

=item PRIVATE void _write( Filehandle fh, string name, boolean strip_dos_newlines );

Private method to write a file to the filesystem and returns the
amount of data written. Used by FileResource constructors.

=cut 
#------------------------------------------------------------------------
  sub _write {

    my ($class, $fh, $name, $strip_dos_newlines) = @_;

    # hash directories on first two characters
    my $p1 = substr($name, 0, 1);
    my $p2 = substr($name, 1, 1); 

    # make sure the repository is available
    my $file_repository = ISGA::SiteConfiguration->value('file_repository') 
      or X::API::Configuration::Missing->throw( variable => 'file_repository' );

    # open filehandle for writing
    open my $upload, ">", "$file_repository/$p1/$p2/$name"
      or X->throw( error => "$!:$file_repository/$p1/$p2/$name" );

    # create buffer
    my $buf;

    # decide on how much to read in a go
    my $max_buffer_size = 1024 * 1024 * 2;
    my $size = (stat($fh))[7];
    $size = $max_buffer_size if ( $size > $max_buffer_size );

    # this idiom is copied from File::Copy
    for (;;) {
      my ($r, $w, $t);
      
      # use read rather than sysread to in case we are using gzip or another IO layer
      defined($r = read($fh, $buf, $size)) or X::API->throw( message => "error reading file $name: $!" );
      last unless $r;

      # strip windows junk
      if ( $strip_dos_newlines ) {
	$buf =~ s/\r//g;
	$r = length($buf);
      }
      
      for ($w = 0; $w < $r; $w += $t) {
	$t = syswrite($upload, $buf, $r - $w, $w) or X::API->throw( message => "error writing file $name: $!" );
      }
    }

    close $upload;
  }

#------------------------------------------------------------------------

=item public File verifyFileHandle(Filehandle fh, FileType type, FileFormat format);

Confirms that a file handle types are valid.

=cut 
#------------------------------------------------------------------------
sub verifyFileHandle {

  my ($class, $fh, $type, $format) = @_;


}
