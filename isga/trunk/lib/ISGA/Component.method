# -*- cperl -*-

use Data::Dumper;

#------------------------------------------------------------------------

=item public void writeConfigFile( RunBuilder $rb, ParameterMask $mask, { ClusterInput => string } $cluster_inputs );

Write the config file for this component in support of an Ergatis run.

=item public void writeConfigFile( RunBuilder $rb, ParameterMask $mask, { ClusterInput => string } $cluster_inputs, int $iteration );

Write the $iteration-th config file for this component in support of an Ergatis run.

=cut
#------------------------------------------------------------------------
  sub writeConfigFile {

    my ($self, $rb, $mask, $cluster_inputs, $iteration) = @_;
    # nuke mask from this!

    # register RunBuilder
    $self->{run_builder} = $rb;
    $self->{cluster_inputs} = $cluster_inputs;
    $iteration and $self->{iteration} = $iteration;

    # process parameters
    $self->{parameters} = $rb->getComponentParameterValues($self);
    
    # use Mason to generate the config file
    my $out_buffer;
    my $interp = HTML::Mason::Interp->new( comp_root  => '___package_include___', out_method => \$out_buffer );
    $interp->exec( $self->getConfigFilePath, self => $self );

    # write the file
    my $path = $rb->getFullErgatisPath . '/'. $self->getErgatisName . '.config';
    ISGA::Utility->writeFile($path, $out_buffer);
  }
  
#------------------------------------------------------------------------

=item public string getParameter(string $name);

Returns a the ergatis config value for the supplied parameter.

=cut

#------------------------------------------------------------------------
  sub getParameter {
    
    my ($self, $name) = @_;
    exists $self->{run_builder} or X::API::ComponentNotConfigured->throw();
    exists $self->{parameters}{$name} or X::API->throw( message => "$name not found as parameter for component " . $self->getName );
    return $self->{parameters}{$name};
  }

#------------------------------------------------------------------------

=item public string getRunParameter(string $name);

Returns a the ergatis config value for the supplied run parameter.

=cut

#------------------------------------------------------------------------
  sub getRunParameter2 {
    
    my $self = shift;

    exists $self->{run_builder} or X::API::ComponentNotConfigured->throw();
    return $self->{run_builder}->getParameter(@_);
  }

#------------------------------------------------------------------------

=item public string getIteration();

Returns the iteration count for the component.

=cut

#------------------------------------------------------------------------
  sub getIteration {

    my $self = shift;
    exists $self->{iteration} or X::API::ComponentNotConfigured->throw();
    return $self->{iteration};
  }
    
#------------------------------------------------------------------------

=item public string getInput(string $name);

Returns a the ergatis config value for the supplied input.

=cut

#------------------------------------------------------------------------
  sub getInput {
    
    my ($self, $name) = @_;

    exists $self->{run_builder} or X::API::ComponentNotConfigured->throw();

    my $ci = ISGA::ClusterInput->new( Component => $self, Name => $name );
    my $value = exists $self->{cluster_inputs}{$ci} ? $self->{cluster_inputs}{$ci} : $ci->getValue($self->{run_builder});
    return $value;
  }

#------------------------------------------------------------------------

=item public string getProjectIDRoot();

Returns a cloned ComponentBuilder with ParameterMask values injected in

=cut

#------------------------------------------------------------------------
  sub getProjectIDRoot {

    my $self = shift;

    exists $self->{run_builder} or X::API::ComponentNotConfigured->throw();

    return $self->{run_builder}->getScrubbedName;
  }

#------------------------------------------------------------------------

=item public ISGA::Component formatArrayParam(ParameterMaskValue $array);

Formats an array of values for a component input value.

=cut

#------------------------------------------------------------------------
  sub formatArrayParam{
   my ($self, $array);
     return $array;
  }
