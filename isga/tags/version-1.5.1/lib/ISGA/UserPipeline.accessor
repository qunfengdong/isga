# -*- cperl -*-
#------------------------------------------------------------------------

=item public ParameterMask getParameterMask();

Returns the parameter mask for this pipeline.

=cut
#------------------------------------------------------------------------
  sub getParameterMask {
    return ISGA::ParameterMask->new($_[0]->{userpipeline_parametermask});
  }

#------------------------------------------------------------------------

=item public ParameterMask getRawParameterMask();

Returns the string for the parameter mask for this pipeline. Useful
when you dont want to pay to load the YAML object.

=cut
#------------------------------------------------------------------------
  sub getRawParameterMask { return $_[0]->{userpipeline_parametermask}; }

#------------------------------------------------------------------------

=item public GlobalPipeline getGlobalTemplate();

Returns the GlobalPipeline that this UserPipeline is ultimately
templated on.

=cut
#------------------------------------------------------------------------
  sub getGlobalTemplate { return shift->getTemplate->getGlobalTemplate(); }

#------------------------------------------------------------------------

=item public ErgatisInstall getErgatisInstall();

Returns the ErgatisInstall for this pipelines template.

=cut
#------------------------------------------------------------------------
  sub getErgatisInstall { return shift->getGlobalTemplate->getErgatisInstall; }

#------------------------------------------------------------------------

=item public string getLabel();

Returns the name and release of the pipeline.

=cut
#------------------------------------------------------------------------
  sub getLabel { return shift->getName(); }

#------------------------------------------------------------------------

=item public string getWebPluginDirectory();

Returns the directory for storing global-pipeline specific mason components.

=cut
#------------------------------------------------------------------------
  sub getWebPluginDirectory {
    return shift->getGlobalTemplate->getWebPluginDirectory;
  }
    
#------------------------------------------------------------------------

=item public [Workflow] getWorkflow();

Returns the Workflow objects associated with this pipeline.

=item public Workflow getWorkflow(Cluster $cluster);

Returns the Workflow object associates with this pipeline and the
supplied Cluster. Raises an exception if the Workflow does not exist.

=cut
#------------------------------------------------------------------------
  sub getWorkflow { shift->getTemplate->getWorkflow(@_); }

#------------------------------------------------------------------------

=item public [Cluster] getClusters();

Convenience method to return a list of clusters activated in this
pipeline.

=cut
#------------------------------------------------------------------------
  sub getClusters {

    my $self = shift;
  
    my $wf_mask = $self->getWorkflowMask();
    my @clusters = map { $_->getCluster } @{$self->getGlobalTemplate->getWorkflow};

    defined $self->getActiveAlternateClusters and push(@clusters, @{$self->getActiveAlternateClusters});

    # return the clusters that are active
    return [grep { $wf_mask->isActive($_) } @clusters];
  }

#------------------------------------------------------------------------

=item public [Cluster] getActiveAlternateClusters();

Returns the alternate clusters that are active in this pipeline builder.

=cut
#------------------------------------------------------------------------
  sub getActiveAlternateClusters {

    my $self = shift;

    my $wf_mask = $self->getWorkflowMask();
    my $template = $self->getGlobalTemplate;
    my @alternate;

    # search through disabled clusters to see if they have a defined alternative cluster
    foreach my $cluster (grep { ! $wf_mask->isActive($_) } @{$self->getGlobalTemplate->getClusters}){
      if ( my $alt = ISGA::Workflow->new(Cluster => $cluster)->getAltCluster ) {
	push @alternate, $alt;
      }
    }

    return \@alternate;
  }

#------------------------------------------------------------------------

=item public [Component] getComponents();

Return a list of activated components in this pipeline.

=item public [Component] getComponents(Cluster $cluster);

Return a list of activated components in cluster of the pipeline.

=cut
#------------------------------------------------------------------------
  sub getComponents {

    my ($self, $cluster) = @_;

    my $components  = [];
    my $template = $self->getGlobalTemplate();
    my $wf_mask = $self->getWorkflowMask();

    # if we are given a cluster and it is part of our pipeline check for components
    if ( $cluster and ISGA::Workflow->exists(Cluster => $cluster, Pipeline => $template) ) {

      # if the cluster is active get the components
      if ( $wf_mask->isActive($cluster) ) {
	$components = ISGA::Component->query( Cluster => $cluster );
	
      # otherwise if it has an alternate use that
      } elsif ( my $alt = ISGA::Workflow->new(Cluster => $cluster, Pipeline => $template)->getAltCluster ) {
        $components = ISGA::Component->query( Cluster => $alt );
      }

    # if they didn't supply a cluster, grab components from all active clusters
    } else {
      $components = ISGA::Component->query( Cluster => $self->getClusters );
    }

    # filter out components that aren't active
    return [grep { $wf_mask->isActive($_) } @$components];
  }

#------------------------------------------------------------------------

=item public string getImage();

Returns the path to the base image for this workflow.

=cut
#------------------------------------------------------------------------
  sub getImage { shift->getTemplate->getImage; }

#------------------------------------------------------------------------

=item public string getLayout();

Returns the pipeline layout for the template used to create this pipeline.

=cut
#------------------------------------------------------------------------
  sub getLayout { shift->getTemplate->getLayout; }

#------------------------------------------------------------------------

=item public ComponentBuilder getComponentBuilder(Component $component);

Returns a component builder with this objects parameter mask applied.

=cut
#------------------------------------------------------------------------
  sub getComponentBuilder {

    my ($self, $component) = @_;
    return ISGA::ComponentBuilder->new( $component, $self->getGlobalTemplate, $self->getParameterMask );
  }
