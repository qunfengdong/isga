# -*- cperl -*-

#------------------------------------------------------------------------

=item PRIVATE void _initializeOutputs();

Creates placeholders for all expected pipeline outputs.

=cut 
#------------------------------------------------------------------------
sub _initializeOutputs {

  my $self = shift;

  foreach my $component ( @{$self->getType->getComponents} ) {

    foreach ( @{ISGA::ClusterOutput->query( Component => $component )} ){
      next if $_->getVisibility ne 'Pipeline';
      ISGA::RunOutput->create( Run => $self, ClusterOutput => $_ );
    }
  }
}

#------------------------------------------------------------------------

=item PRIVATE void _initializeClusters();

Creates table entries for the clusters we will run.

=cut 
#------------------------------------------------------------------------
sub _initializeClusters {

  my $self = shift;

  my $incomplete = ISGA::RunStatus->new( Name => 'Incomplete' );

  foreach my $cluster ( @{$self->getType->getClusters} ) {
    
    ISGA::RunCluster->create( Run => $self, Cluster => $cluster,
				  Status => $incomplete );
  }
}

#------------------------------------------------------------------------

=item public void updateStatus();

Updates the run status by parsing the ergatis pipeline.xml. This will
update the run status, as well as pull information for clusters and
outputs.

=cut
#------------------------------------------------------------------------
sub updateStatus {

  my $self = shift;

  my $status = $self->getStatus;

  return if $status eq 'Complete';

  eval {

    ISGA::DB->begin_work();

    my $pipeline = $self->getType;
    my $clusters = $pipeline->getClusters;

    my %finished_components;
    my @working_clusters;

    foreach ( @$clusters ) {

      my ($run_cluster) = @{ISGA::RunCluster->query( Run => $self, Cluster => $_ )};
      my $components = $pipeline->getComponents($_);

      if ( $run_cluster->getStatus eq 'Complete' ) {
	map {$finished_components{ $_->getErgatisName }++} @$components;
	
      } else {
	push @working_clusters, [ $run_cluster, $components ];
      }
    }
   
    my $ergatis_status = 
      ISGA::ErgatisRunStatus->new( $self->getErgatisKey, \%finished_components );

    my $new_status = ucfirst( $$ergatis_status{'start pipeline:'}->{state} );
    
    $new_status ||= "Submitting";  

    $new_status eq $status or
      $self->edit( Status => ISGA::RunStatus->new( Name => $new_status ) );

    if ( $new_status eq 'Complete' ) {
      $self->edit( FinishedAt => $ergatis_status->{'start pipeline:'}->{'endTime'});
    }

    # go through each cluster
    $_->[0]->updateStatus($ergatis_status, $_->[1]) for @working_clusters;
    
    ISGA::DB->commit();
  };

  if ( $@ ) {
    ISGA::DB->rollback();

    my $e = ( X->caught() ? $@ : X::Dropped->new(error => $@) );    
    $e->rethrow();
  }  
 
}
