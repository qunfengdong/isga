# -*- cperl -*-

#------------------------------------------------------------------------

=item public GlobalPipeline getGlobalPipeline();

Returns the global pipeline for the run builder.

=cut 
#------------------------------------------------------------------------
  sub getGlobalPipeline {
    return shift->getPipeline->getGlobalTemplate();
  }

#------------------------------------------------------------------------

=item public string getFullErgatisPath();

Returns a string giving the full path to to the ergatis directory for
this run builder.

=cut 
#------------------------------------------------------------------------
  sub getFullErgatisPath {

    my $self = shift;
    return join( '/', $self->getPipeline->getErgatisSubmissionDirectory, $self->getErgatisDirectory );
  }

#------------------------------------------------------------------------

=item public string getWebPluginDirectory();

Returns the directory for storing global-pipeline specific mason components.

=cut
#------------------------------------------------------------------------
  sub getWebPluginDirectory {
    return shift->getPipeline->getWebPluginDirectory();
  }

#------------------------------------------------------------------------

=item public string getScrubbedName();

Returns the name of the RunBuilder after being scrubbed so that it can
be safely interpretted as a perl variable by ergatis scripts.

=cut
#------------------------------------------------------------------------
  sub getScrubbedName {
    
    my $id_root = shift->getName;
    $id_root =~ s/\s/_/g;
    $id_root =~ s/\./_/g;
    $id_root = "My_$id_root" if $id_root =~ /^[0-9]/;
    
    # formatdb fails for long strings, so let's control the length
    length($id_root) > 39 and $id_root = substr($id_root, 0, 39);
    return $id_root;
  }

#------------------------------------------------------------------------

=item public integer getIterationCount(Cluster $c);

Returns the number of times the provided cluster will be excuted.

=cut 
#------------------------------------------------------------------------
  sub getIterationCount {

    my ($self, $c) = @_;
    
    my $p = $self->getPipeline();
    my $ci = $c->getIteratesOn() or return 0;

    my $pi = ISGA::PipelineInput->new( ClusterInput => $ci, Pipeline => $p );
    
    return ISGA::RunBuilderInput->exists( RunBuilder => $self, PipelineInput => $pi );
  }

#------------------------------------------------------------------------

=item public [Component] getComponents(Cluster $cluster);

Return a list of activated components in cluster of the pipeline.

=cut 
#------------------------------------------------------------------------
sub getComponents {

  my ($self, $cluster) = @_;

  defined $cluster and UNIVERSAL::isa($cluster, 'ISGA::Cluster')
    or X::API->throw("You must pass a cluster to RunBuilder::getComponents");
  
  my $p = $self->getPipeline;

  # pass along cluster if we got it
  my $components = $p->getComponents($cluster);

  # we're done if there are no iterations
  my $ci = $cluster->getIteratesOn;
  $ci or return $components;

  my $iterations = $self->getIterationCount($cluster);

  my @return;
  for my $c ( @$components ) {
    push @return, ISGA::Component::Iterated->new($c, $_) for ( 1 .. $iterations );
  }

  return \@return;  
}

#------------------------------------------------------------------------

=item public [PipelineInput] getRequiredInputs();

Returns an reference to an array of pipeline inputs required by this run.

=cut 
#------------------------------------------------------------------------
sub getRequiredInputs {

  my $self = shift;
  $self->_processInputs();

  return $self->{_cached_inputs}{required};
}

#------------------------------------------------------------------------

=item public [PipelineInput] getOptionalInputs();

Returns an reference to an array of pipeline inputs required by this run.

=cut 
#------------------------------------------------------------------------
sub getOptionalInputs {

  my $self = shift;
  $self->_processInputs();

  return $self->{_cached_inputs}{optional};
}

#------------------------------------------------------------------------

=item public int getMissingRequiredInputs();

Returns the number of required inputs that have not been specified for
this run.

=cut 
#------------------------------------------------------------------------
sub getMissingRequiredInputs {

  my $self = shift;
  $self->_processInputs();

  return $self->{_cached_inputs}{missing};
}

#------------------------------------------------------------------------

=item public [RunBuilderInput] getInputs();

Retrieves all the inputs for the Run Builder.

=item public [RunBuilderInput] getInputs(PipelineInput $pi);

Retrieves all the inputs for the Run Builder matching the supplied Pipeline Input.

=cut
#------------------------------------------------------------------------
sub getInputs { 

  my ($self, $pi) = shift;

  my %args = ( RunBuilder => $self );
  $pi and $args{PipelineInput} = $pi;

  return ISGA::RunBuilderInput->query( %args ); 
}

#------------------------------------------------------------------------

=item public ParameterMask getParameterMask();

Returns the parameter mask for this pipeline.

=cut
#------------------------------------------------------------------------
  sub getParameterMask {
    return ISGA::ParameterMask->new($_[0]->{runbuilder_parametermask});
  }

#------------------------------------------------------------------------

=item public ParameterMask getRawParameterMask();

Returns the string for the parameter mask for this pipeline. Useful
when you dont want to pay to load the YAML object.

=cut
#------------------------------------------------------------------------
  sub getRawParameterMask { return $_[0]->{runbuilder_parametermask}; }

#------------------------------------------------------------------------

=item public bool hasRunParameters();

Returns true if the RunBuilder has any defined run parameters. 

WARNINGS: This method is slow because it answers the question
dynamically. You may be able to speeed this method up dramatically by overriding
with a method that returns a hardcoded value.

=cut
#------------------------------------------------------------------------
  sub hasRunParameters {

    my $self = shift;

    my $pipeline = $self->getPipeline;
    my $components = $pipeline->getComponents;   
    my $parameter_mask = $self->getParameterMask;   

    for ( grep { $pipeline->getComponentBuilder($_) } @$components ) {
      
      my $run_builder_form = 
	$pipeline->getComponentBuilder($_, $parameter_mask)->getRunBuilderForm;
      
      $run_builder_form and return 1;
    }
    
    return 0;
  }  

#------------------------------------------------------------------------

=item public bool hasUnconfiguredParameters();

Returns true if the RunBuilder has any parameters that still need to
be configured.

=cut
#------------------------------------------------------------------------
  sub hasUnconfiguredParameters {

    my $self = shift;

    my $pipeline = $self->getPipeline;
    my $components = $pipeline->getComponents;    
    my $parameter_mask = $self->getParameterMask;   
   
    for ( grep { $pipeline->getComponentBuilder($_) } @$components ) {

      my $run_builder_form = 
	$pipeline->getComponentBuilder($_, $parameter_mask)->getRunBuilderForm;
      
      foreach ( @{$run_builder_form->{sub}} ) {

	exists $_->{VALUE} or return 1;
      }
    }
    
    return 0;
  }

#------------------------------------------------------------------------

=item public ArrayRef getParameterDetails();

Returns [string $clustername, string $parametername, string $value]
for each runbuilder parameter.

=cut
#------------------------------------------------------------------------
  sub getParameterDetails {

    my $self = shift;

    my $pipeline = $self->getPipeline;
    my $components = $pipeline->getComponents;
    my $parameter_mask = $self->getParameterMask;

    my @params;

    for my $component ( grep { $pipeline->getComponentBuilder($_) } @$components ) {

      my $cluster_name = $component->getCluster->getName;      

      my $run_builder_form = 
	$pipeline->getComponentBuilder($component, $parameter_mask)->getRunBuilderForm;
      
      foreach ( @{$run_builder_form->{sub}} ) {
        next if ( defined $_->{templ} and $_->{templ} eq 'hidden' );
	my @details = ( $cluster_name, $_->{TITLE} );

	push @details, ( exists $_->{VALUE} ? $_->{VALUE} : '<span class="alert">None</span>' );

        $details[2] = $parameter_mask->{Component}{$component}{$_->{NAME}}{Print} if(exists $parameter_mask->{Component}{$component}{$_->{NAME}}{Print});

	push @params, \@details;
      }
    }

    return \@params;
  }

#------------------------------------------------------------------------

=item public ArrayRef getPrettyPrint();

Returns [string $clustername, string $parametername, string $value]
for each runbuilder parameter.

=cut
#------------------------------------------------------------------------
  sub getPrettyPrint {

    my $self = shift;

    my $pipeline = $self->getPipeline;
    my $components = $pipeline->getComponents;
    my $parameter_mask = $self->getParameterMask;

    my @params;

    for my $component ( grep { $pipeline->getComponentBuilder($_) } @$components ) {

      my $cluster_name = $component->getCluster->getName;

      my $run_builder_form =
        $pipeline->getComponentBuilder($component, $parameter_mask)->getRunBuilderForm;

      foreach my $field ( @{$run_builder_form->{sub}} ) {
        next if ( defined $field->{templ} and $field->{templ} eq 'hidden' );
        my @details = ( $cluster_name, $field->{TITLE} );

        push @details, ( exists $field->{VALUE} ? $field->{VALUE} : '<span class="alert">None</span>' );

        if(exists $field->{OPT_VAL} && exists $field->{VALUE}){
          my( $index )= grep { ${$field->{OPT_VAL}}[$_] eq $details[2] } 0..$#{$field->{OPT_VAL}};
          $details[2] = ${$field->{OPTION}}[$index];
        }
        push @params, \@details;
      }
    }

    return \@params;
  }

