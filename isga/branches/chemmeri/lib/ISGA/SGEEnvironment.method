# -*- cperl -*-

#------------------------------------------------------------------------

=item public void submitJob();

Submit a staged job.

=cut
#------------------------------------------------------------------------
sub submitJob {

  my ($self, $job) = @_;
  
  my $status = $job->getStatus;
  my $pid = $job->getPid;

  eval {

    ISGA::DB->begin_work();

    $job->edit( Status => 'Pending' );

    my $exec_path = $self->getExecutablePath();
    my $wd = $job->getWorkingDirectory();

    my $sge=ISGA::SGEScheduler->new(
                                    -executable  => {qsub=> "$exec_path/qsub -q " . $self->getQueue(), qstat=> "$exec_path/qstat"},
                                    -output_file => "$wd/sge_log/sgeout",
                                    -error_file => "$wd/sge_log/sgeerror",
                                   );

    $sge->command("$wd/job.sh");
    my $pid = $sge->execute();
    X->throw(message => 'Error submitting job.') unless($pid);
    $self->edit( Pid => $pid );

    ISGA::DB->commit();
  };

  if ( $@ ) {
    ISGA::DB->rollback();

    my $e = ( X->caught() ? $@ : X::Dropped->new(error => $@) );
    $e->rethrow();
  }

}

#------------------------------------------------------------------------

=item public RunStatus checkJobStatus(Job $job);

Checks the SGE environment to determine the status of a running job
and returns the new status.

=cut
#------------------------------------------------------------------------
sub checkJobStatus {
  
  my ($self, $job) = @_;

  my $pid = $job->getPid();

  

  my $sge=ISGA::SGEScheduler->new(
       -executable  => {qsub=> $self->getExecutablePath .'/qsub -q ' . $self->getQueue, 
			qstat=> $self->getExecutablePath .'/qstat'},
				 );
  
  return $sge->checkStatus($pid);
}

