--- !perl/SysMicro::ComponentBuilder
Name: 'Glimmer3'
Description: 'The Glimmer3 component accepts a FASTA file as input and predicts open reading frames.  The resulting data includes coordinate, frame, strand, and score information as well as the extracted genes in FASTA format.'
Params:
  - { NAME: 'longorfentropy', TITLE: 'Long ORF Entropy Cutoff', REQUIRED: 1, VALUE: '1.15', ERROR: [ ['Number::isBetween', 0, 20], 'Number::isNumber' ], DESCRIPTION: 'Only genes with an entropy distance score less than x will be considered. This cutoff is made before any subsequent steps in the algorithm.  Default value is 1.15.', FLAG: '-t', CONFIGLINE: '___LONG_ORF_OPTS___'}
  - { NAME: 'maxoverlap', TITLE: 'Maximum Overlap', REQUIRED: 1, VALUE: '50', ERROR: ['digitonly'], DESCRIPTION: 'Set the maximum overlap length to n . Overlaps of this many or fewer bases between genes are not regarded as overlaps.  Default value is 50.', FLAG: '-o', CONFIGLINE: '___GLIMMER3_OPTS___' }
  - { NAME: 'mingenelength', TITLE: 'Minimum Gene Length', REQUIRED: 1, VALUE: '110', ERROR: ['digitonly'], DESCRIPTION: 'Set the minimum gene length to n nucleotides. This does not include the bases in the stop codon.  Default is 110', FLAG: '-g', CONFIGLINE: '___GLIMMER3_OPTS___' }
  - { NAME: 'thresholdscore', TITLE: 'Threshold Score', REQUIRED: 1, VALUE: '30', ERROR: ['digitonly'], DESCRIPTION: 'Set the threshold score for consideration as a gene to n . If the in-frame score is greater-than-or-equal-to n , then the region is given a number and considered a potential gene.  Note this is the integer score in the column labelled "InFrm" in the .detail file, not the decimal score in the column labelled "Raw".  Default value is 30.', FLAG: '-t', CONFIGLINE: '___GLIMMER3_OPTS___' }
  - { templ: 'select', NAME: 'translationtable', TITLE: 'Translation Table', REQUIRED: 1, OPTION: ['(1) Standard Table', '(2) Vertebrate Mitochondrial Table', '(3) Yeast Mitochondrial Table', '(4) Mold, Protozoan, and Coelenterate Mitochondria Table', '(5) Invertebrate Mitochondrial Table', '(6) Ciliate, Dasycladacean and Hexamita Nuclear Table', '(9) Echinoderm and Flatworm Mitochondrial Table', '(10) Euplotid Nuclear Table', '(11) Bacterial Table'], OPT_VAL: [1, 2, 3, 4, 5, 6, 9, 10, 11], VALUE: 11, DESCRIPTION: 'Genbank translation table number n to specify stop codons.  Default value is (11) Bacterial Table as this is a prokaryotic pipeline.', FLAG: '-z', CONFIGLINE: '___GLIMMER3_OPTS___' }
  - { NAME: 'startcodon', TITLE: 'Start Codon', ERROR: [ 'Cluster::codonCheck' ], DESCRIPTION: 'Specify allowable start codons as a comma-separated list. Sample format:  atg,gtg . The default start codons are atg, gtg and ttg.  No input is required for default usage.', CONFIGLINE: '___START_CODON_USAGE___' }
  - { NAME: 'gcpercentage', TITLE: 'GC Percentage', ERROR: ['Number::isNumber'], DESCRIPTION: 'Use p as the GC percentage of the independent model, i.e., the model of intergenic sequence. Note: p should be a percentage, e.g., 45.2.  If this option is not specified, the GC percentage will be counted from the input file.', FLAG: '-C', CONFIGLINE: '___GLIMMER3_OPTS___' }
  - { NAME: 'stopcodon', TITLE: 'Stop Codon', ERROR: ['Cluster::codonCheck'], DESCRIPTION: 'Specify stop codons as a comma-separated list. Sample format: tag,tga,taa .  The default stop codons are tag, tga and taa.  Leave input blank to accept defaults', FLAG: '-Z', CONFIGLINE: '___GLIMMER3_OPTS___' }
  - { NAME: 'startcodonprobability', TITLE: 'Start Codon Probability', ERROR: [ ['Cluster::codonProbability', 'startcodon'] ], DESCRIPTION: 'Specify the probability of different start codons (same number and order as in Start Codon). If no alternative start codon option is given, then there should be 3 values: for atg, gtg and ttg, in that order. Sample format: 0.6,0.35,0.05. If start codons are set and probability is not set, then each start codon is equally likely (which is very unusual).', FLAG: '-P', CONFIGLINE: '___GLIMMER3_OPTS___' }
  - { templ: 'check', NAME: 'lineargenome', TITLE: 'Linear Genome', OPTION: 'Linear Genome', OPT_VAL: '-l', VALUE: '-l', DESCRIPTION: 'Assume a linear rather than circular genome, i.e., there will be no genes that "wraparound" between the beginning and end of the sequence.', CONFIGLINE: '___GLIMMER3_OPTS___' }
  - { templ: 'check', NAME: 'extendorfsoffend', TITLE: 'Extend ORFs off end', OPTION: 'Extend ORFs off end', OPT_VAL: '-X', VALUE: '-X', DESCRIPTION: 'Also score orfs that extend off the end of the sequence(s). This option presumes that the sequence(s) is linear and not circular. Reported positions off the end of the sequence are the nearest positions in the correct reading frame. Note that this ignores any partial codons at the ends of a sequence. Suppose, for example, that a sequence is 998bp long and an orf in reading frame +1 starts at position 601 and extends off the end of the sequence. Then the end of that gene/orf will be reported at position 999, as if the stop codon were in positions 997. . . 999. This is true even if the last two characters of the sequence are, say, cc and cannot possibly be part of a stop codon.  Any scores associated with orfs that extend past the end of a sequence are computed using only complete codons contained in the sequence.', ERROR: ['Cluster::extendOrfsOffEndDependency'], CONFIGLINE: '___GLIMMER3_OPTS___' }
RunBuilderParams:
  - { templ: 'hidden', NAME: 'project_id_root', TITLE: 'Project Id Root', REQUIRED: 1, DESCRIPTION: 'The Id root used in bsml id generation', CONFIGLINE: '___project_id_root___' }

