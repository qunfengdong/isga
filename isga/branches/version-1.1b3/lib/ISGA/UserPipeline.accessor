# -*- cperl -*-
#------------------------------------------------------------------------

=item public ParameterMask getParameterMask();

Returns the parameter mask for this pipeline.

=cut
#------------------------------------------------------------------------
  sub getParameterMask {
    return ISGA::ParameterMask->new($_[0]->{userpipeline_parametermask});
  }

#------------------------------------------------------------------------

=item public ParameterMask getRawParameterMask();

Returns the string for the parameter mask for this pipeline. Useful
when you dont want to pay to load the YAML object.

=cut
#------------------------------------------------------------------------
  sub getRawParameterMask { return $_[0]->{userpipeline_parametermask}; }

#------------------------------------------------------------------------

=item public GlobalPipeline getGlobalTemplate();

Returns the GlobalPipeline that this UserPipeline is ultimated
templated on.

=cut
#------------------------------------------------------------------------
  sub getGlobalTemplate { return shift->getTemplate->getGlobalTemplate(); }
    
#------------------------------------------------------------------------

=item public [Workflow] getWorkflow();

Returns the Workflow objects associated with this pipeline.

=cut
#------------------------------------------------------------------------
  sub getWorkflow { shift->getTemplate->getWorkflow; }

#------------------------------------------------------------------------

=item public [Cluster] getClusters();

Convenience method to return a list of clusters activated in this
pipeline.

=cut
#------------------------------------------------------------------------
  sub getClusters {

    my $self = shift;
  
    my $dis_clusters = $self->getWorkflowMask->getDisabledClusters;
    my $clusters = $self->getGlobalTemplate->getClusters;
    defined $self->getActiveAlternateClusters and push(@$clusters, @{$self->getActiveAlternateClusters});

    return [grep { ! exists $dis_clusters->{ $_->getName } } @$clusters];
  }

#------------------------------------------------------------------------

=item public [Cluster] getActiveAlternateClusters();

Returns the alternate clusters that are active in this pipeline builder.

=cut
#------------------------------------------------------------------------
  sub getActiveAlternateClusters {

    my $self = shift;

    my $dis_clusters = $self->getWorkflowMask->getDisabledClusters;
    my $clusters = $self->getGlobalTemplate->getClusters();
    my $template = $self->getGlobalTemplate;
    my $active_alt;
    foreach my $cluster (@$clusters){
      next unless( (ISGA::Workflow->exists(Cluster => $cluster, Pipeline => $template)) && (exists $dis_clusters->{ $cluster->getName }) );
        my $alt_cluster = ISGA::Workflow->new(Cluster => $cluster)->getAltCluster;
        push(@$active_alt, $alt_cluster) if(defined $alt_cluster);
    }

    return $active_alt;
  }


#------------------------------------------------------------------------

=item public [Component] getComponents();

Return a list of activated components in this pipeline.

=item public [Component] getComponents(Cluster $cluster);

Return a list of activated components in cluster of the pipeline.

=cut
#------------------------------------------------------------------------
  sub getComponents {

    my ($self, $cluster) = @_;

    my $components = [];
    my $template = $self->getGlobalTemplate();
    my $wf_mask = $self->getWorkflowMask;

    # if we are given a cluster and it is part of our pipeline check for components
    if ( $cluster and ISGA::Workflow->exists(Cluster => $cluster, Pipeline => $template) ) {
      my $alt_cluster = ISGA::Workflow->new(Cluster => $cluster)->getAltCluster;

      # if the cluster isn't disabled, grab all the components
      my $dis_clusters = $wf_mask->getDisabledClusters;
      if( (exists $dis_clusters->{ $cluster->getName }) && (defined $alt_cluster) ){
        $components = ISGA::Component->query( Cluster => $alt_cluster );
      } else {
        exists $dis_clusters->{ $cluster->getName }
         or $components = ISGA::Component->query( Cluster => $cluster );
      }

	
    } else {
      $components = ISGA::Component->query( Cluster => $self->getClusters );
    }

    
    my %off_components = %{$wf_mask->getDisabledComponents};
    my %orp_components = %{$wf_mask->getOrphanedComponents};
    @off_components{ keys %orp_components} = 'orphaned';
    
    return [grep { ! exists $off_components{ $_->getErgatisName } } @$components];
  }

#------------------------------------------------------------------------

=item public string getImage();

Returns the path to the base image for this workflow.

=cut
#------------------------------------------------------------------------
  sub getImage { shift->getTemplate->getImage; }

#------------------------------------------------------------------------

=item public string getLayout();

Returns the pipeline layout for the template used to create this pipeline.

=cut
#------------------------------------------------------------------------
  sub getLayout { shift->getTemplate->getLayout; }


#------------------------------------------------------------------------

=item public ComponentBuilder getComponentBuilder(Component $component);

Returns a component builder with this objects parameter mask applied.

=item public ComponentBuilder getComponentBuilder(Component $component, ParameterMask $mask);

Returns a component builder with the supplied parameter mask applied.

=cut
#------------------------------------------------------------------------
  sub getComponentBuilder {

    my ($self, $component, $parameter_mask) = @_;

    $parameter_mask ||= $self->getParameterMask;

    return ISGA::ComponentBuilder->new( $component, $parameter_mask );
  }

#------------------------------------------------------------------------

=item public boolean isInstalled();

Returns true if this pipeline is installed for this ISGA instance.

=cut
#------------------------------------------------------------------------
  sub isInstalled {

    my $self = shift;

    my $gp = $self->getTemplate();

    return ISGA::PipelineConfiguration->value( 'pipeline_is_installed', Pipeline => $gp,
					       UserClass => undef );
  }
