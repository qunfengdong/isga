# -*- cperl -*-

#------------------------------------------------------------------------

=item void buildEvidenceFile();

Generates a gzippef file containing the evidence output for the run.

=cut 
#------------------------------------------------------------------------
sub buildEvidenceFile {

  my $self = shift;

  my $archive = ISGA::Tar->new();
  my $run_dir = "Run-" . $self->getErgatisKey;

  foreach my $rc ( grep { $_->hasEvidence() } @{$self->getClusters} ) {

    my $cluster = $rc->getCluster;

    $rc->getStatus eq 'Complete' or X::API->throw( message => 'Invalid RunCluster Status' );

    my $cluster_dir = $run_dir . '/' . $cluster->getName;

    my $iterations = $rc->getIterations;

    # work through our components
    foreach my $component ( grep { $_->getCluster == $cluster } @{$self->getType->getComponents} ) {
      
      foreach my $co ( @{ISGA::ClusterOutput->query( Component => $component,
						     Visibility => 'Evidence' )} ){
	
	# add contents to file
	if ( $iterations ) {
	  for ( 1 .. $iterations ) {
	    $co->buildEvidence( $self, $cluster_dir, $archive, $_);
	  }
	} else {
	  $co->buildEvidence( $self, $cluster_dir, $archive);
	}
      }
    }
  }
  
  # write compressed tar to the download location
  $archive->write($self->getEvidenceOutputFileName, 1);
}

#------------------------------------------------------------------------

=item PRIVATE void _initializeOutputs(RunBuilder $rb);

Creates placeholders for all expected pipeline outputs.

=cut 
#------------------------------------------------------------------------
sub _initializeOutputs {

  my ($self, $rb) = @_;

  foreach my $cluster ( @{$rb->getPipeline->getClusters} ) {

    foreach my $component ( @{$rb->getComponents($cluster)} ) {
      
      foreach ( @{ISGA::ClusterOutput->query( Component => $component )} ){
	next if $_->getVisibility ne 'Pipeline';
	ISGA::RunOutput->create( Run => $self, ClusterOutput => $_ );
      }
    }
  }
}

#------------------------------------------------------------------------

=item PRIVATE void _initializeClusters(RunBuilder $rb);

Creates table entries for the clusters we will run.

=cut 
#------------------------------------------------------------------------
sub _initializeClusters {

  my ($self, $rb) = @_;

  my $incomplete = ISGA::RunStatus->new( Name => 'Incomplete' );

  my $p = $self->getType;

  foreach my $cluster ( @{$p->getClusters} ) {
    
    my %args = ( Run => $self, Cluster => $cluster, Status => $incomplete );
    
    if ( my $iterations = $rb->getIterationCount($cluster) ) {      
      $args{Iterations} = $iterations;
    }

    ISGA::RunCluster->create( %args );
  }
}

#------------------------------------------------------------------------

=item PRIVATE void _getCurrentStatus();

Retrieves the current status of components in the Run

=cut 
#------------------------------------------------------------------------
  sub _getCurrentStatus {

    my $self = shift;

    my %finished;
    my @working;   

    foreach my $run_cluster ( @{ISGA::RunCluster->query( Run => $self )} ) {

      my $components = $run_cluster->getComponents();

      if ( $run_cluster->getStatus eq 'Complete' ) {
	map {$finished{ $_->getErgatisName }++} @$components;
	
      } else {
	push @working, [ $run_cluster, $components ];
      }
    }

    return [\%finished, \@working];
  }
      
#------------------------------------------------------------------------

=item public void updateStatus();

Updates the run status by parsing the ergatis pipeline.xml. This will
update the run status, as well as pull information for clusters and
outputs.

=cut
#------------------------------------------------------------------------
  sub updateStatus {
    
    my $self = shift;

    my $status = $self->getStatus;
    return if $status eq 'Complete';

    eval {

      ISGA::DB->begin_work();

      my ($finished, $working) = @{$self->_getCurrentStatus};

      my $ergatis_status = ISGA::ErgatisRunStatus->new( $self, $finished );

      my $new_status = ucfirst( $$ergatis_status{'start pipeline:'}->{state} );
    
      $new_status ||= "Submitting";  
      
      $new_status eq $status or
	$self->edit( Status => ISGA::RunStatus->new( Name => $new_status ) );
      
      if ( $new_status eq 'Complete' ) {
	$self->edit( FinishedAt => $ergatis_status->{'start pipeline:'}->{'endTime'});
      }
      
      # go through each cluster
      $_->[0]->updateStatus($ergatis_status, $_->[1]) for @$working;
      
      ISGA::DB->commit();
    };
    
    if ( $@ ) {
      ISGA::DB->rollback();
      
      my $e = ( X->caught() ? $@ : X::Dropped->new(error => $@) );    
      $e->rethrow();
    }  
  }
