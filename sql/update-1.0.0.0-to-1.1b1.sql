-------------------------------------------------------------------
-------------------------------------------------------------------
-- Remove File Contents
-------------------------------------------------------------------
-------------------------------------------------------------------
ALTER TABLE filetype DROP COLUMN filecontent_id;

DROP TABLE filecontent;

-------------------------------------------------------------------
-------------------------------------------------------------------
-- Add subclass support for pipelines
-------------------------------------------------------------------
-------------------------------------------------------------------
ALTER TABLE globalpipeline ADD COLUMN globalpipeline_subclass TEXT;

UPDATE globalpipeline SET globalpipeline_subclass = 'ProkaryoticAnnotation'
    FROM pipeline a
    WHERE globalpipeline.pipeline_id = a.pipeline_id 
          AND a.pipeline_name = 'Prokaryotic Annotation Pipeline'
	  AND a.pipelinepartition_id = 
	  (SELECT pipelinepartition_id FROM pipelinepartition WHERE 
	  	  pipelinepartition_name = 'GlobalPipeline');

-------------------------------------------------------------------
-------------------------------------------------------------------
-- Remove Duplicate Columns in PipelineInput table
-------------------------------------------------------------------
-------------------------------------------------------------------
ALTER TABLE pipelineinput DROP COLUMN inputdependency_id;
ALTER TABLE pipelineinput DROP COLUMN filetype_id;
ALTER TABLE pipelineinput DROP COLUMN fileformat_id;
ALTER TABLE pipelineinput DROP COLUMN pipelineinput_ergatisformat;

-------------------------------------------------------------------
-------------------------------------------------------------------
-- Migrate InputDependency to light dictionary table
-------------------------------------------------------------------
-------------------------------------------------------------------

ALTER TABLE inputdependency RENAME TO inputdependency_old;

CREATE TABLE inputdependency ( inputdependency_name TEXT PRIMARY KEY );

INSERT INTO inputdependency ( inputdependency_name ) VALUES ( 'Required' );
INSERT INTO inputdependency ( inputdependency_name ) VALUES ( 'Optional' );
INSERT INTO inputdependency ( inputdependency_name ) VALUES ( 'Internal Only' );

ALTER TABLE clusterinput ADD COLUMN clusterinput_dependency TEXT REFERENCES inputdependency (inputdependency_name );

UPDATE clusterinput SET clusterinput_dependency = a.inputdependency_name FROM inputdependency a, inputdependency_old b
   WHERE clusterinput.inputdependency_id = b.inputdependency_id AND b.inputdependency_name = a.inputdependency_name;

ALTER TABLE clusterinput ALTER COLUMN clusterinput_dependency SET NOT NULL;
ALTER TABLE clusterinput DROP COLUMN inputdependency_id;

DROP TABLE inputdependency_old;

-------------------------------------------------------------------
-------------------------------------------------------------------
-- Add subclass support for clusters
-------------------------------------------------------------------
-------------------------------------------------------------------
ALTER TABLE cluster ADD COLUMN cluster_subclass TEXT UNIQUE;
ALTER TABLE cluster DROP COLUMN cluster_formpath;

-------------------------------------------------------------------
-------------------------------------------------------------------
-- Remove ishidden and isoptional from component
-------------------------------------------------------------------
-------------------------------------------------------------------
ALTER TABLE component DROP COLUMN component_isoptional;
ALTER TABLE component DROP COLUMN component_ishidden;

-------------------------------------------------------------------
-------------------------------------------------------------------
-- Add Celera Assembly Pipeline
-------------------------------------------------------------------
-------------------------------------------------------------------
-- File Info
INSERT INTO fileformat ( fileformat_name, fileformat_extension, fileformat_help ) VALUES ('SFF', 'sff', 'SFF is the native 454 format.  It is the file format generated by software on 454 sequencing platforms such as 454 FLX and 454 XLR.  You can read more about the format <a href="http://www.ncbi.nlm.nih.gov/Traces/trace.cgi?cmd=show&f=formats&m=doc&s=format#sff">here</a>.');

INSERT INTO fileformat ( fileformat_name, fileformat_extension, fileformat_help ) VALUES ('FRG', 'frg', 'The Celera Assembler native format.  FRG files consist of sequencer reads and relationships between the reads. Two types of relationships are defined: libraries and mates.');


INSERT INTO filetype ( filetype_name, filetype_help )
  VALUES ( 'Native 454 format', 'The proposed SFF file format is a container file for storing one or many 454 reads. 454 reads differ from standard sequencing reads in that the 454 data does not provide individual base measurements from which basecalls can be derived. Instead, it provides measurements that estimate the length of the next homopolymer stretch in the sequence (i.e., in "AAATGG", "AAA" is a 3-mer stretch of As, "T" is a 1-mer stretch of Ts and "GG" is a 2-mer stretch of Gs). A basecalled sequence is then derived by converting each estimate into a homopolymer stretch of that length and concatenating the homopolymers.' );

INSERT INTO filetype ( filetype_name, filetype_help)
  VALUES ( 'Celera Assembler native format', 'These FRG files consist of sequencer reads and relationships between the reads. Two types of relationships are defined: libraries and mates. A library indicates that all reads in this collection come from the same insert library and thus share numerous properties: end orientation, clone size, randomness, approximate read size, etc. A mate indicates that exactly two reads are from opposite ends of a single clone in a library.' );

INSERT INTO fileformat ( fileformat_name, fileformat_extension, fileformat_help ) VALUES ('ASM', 'asm', 'The ASM file is Celera Assemblers most critical output. The ASM file is complete. The ASM was designed to be the sole deliverable of the assembly pipeline.  The ASM file provides a precise description of the assembly as a hierarchical data structure. The ASM defines all elements of the generated assembly, including the scaffolds and contigs. For every contig, the ASM file includes the multiple sequence alignment that produced it. For every contig, the ASM file includes the sequence and quality scores of the consensus. The ASM file identifies the fate of every read and mate pair used in the assembly. It even identifies the fate of most reads and mate pairs that were not used. (An exception is the ignored reads that had no high-quality bases.)');


INSERT INTO filetype ( filetype_name, filetype_help )
  VALUES ( 'Celera Assembler Output', 'An output produced by the celera assembler program.' );

INSERT INTO filetype ( filetype_name, filetype_help )
  VALUES ( 'Mira Assembler Output', 'An output produced by the mira assembler program.' );

INSERT INTO filetype ( filetype_name, filetype_help )
  VALUES ( 'Newbler Assembler Output', 'An output produced by the newbler assembler program.' );

INSERT INTO fileformat ( fileformat_name, fileformat_extension, fileformat_help ) VALUES ('QC', 'qc', 'This text file contains a human-readable summary report. The report lists over 100 statistical measures of the assembly. (Presently, some statistics derive from the input FRG file.) ');

INSERT INTO filetype ( filetype_name, filetype_help )
  VALUES ( 'Hawkeye Input', 'Hawkeye reads the assembly data from an AMOS bank. A bank is a special directory of binary encoded files containing all information on an assembly. A bank is created by the AMOS assemblers directly, or by converting the results of others assemblers into AMOS format.' );

INSERT INTO fileformat ( fileformat_name, fileformat_extension, fileformat_help ) VALUES ('Amos Bank', 'xxx', 'A bank is a special directory of binary encoded files containing all information on an assembly. A bank is created by the AMOS assemblers directly, or by converting the results of others assemblers into AMOS format.');

INSERT INTO fileformat ( fileformat_name, fileformat_extension, fileformat_help ) VALUES ('ACE', 'ace', 'An output produced by several assemblers.');

INSERT INTO fileformat ( fileformat_name, fileformat_extension, fileformat_help ) VALUES ('AGP', 'agp', 'The AGP file describes the positions of the contigs in the genome. It takes the standard NCBI format: <a href="http://www.ncbi.nlm.nih.gov/projects/genome/assembly/agp/AGP_Specification.shtml">NCBI AGP Specification</a>.');

INSERT INTO fileformat ( fileformat_name, fileformat_extension, fileformat_help ) VALUES ('Newbler Metric File', 'xxx', 'Statistics of the assembly, eg: number of reads and bases aligned, overlaps found, mean contig sizes, etc.');

INSERT INTO fileformat ( fileformat_name, fileformat_extension, fileformat_help ) VALUES ('Bambus Mates', 'xxx', 'The .mates file provides two types of information: library data, and mate-pair relationships between reads.');

INSERT INTO fileformat ( fileformat_name, fileformat_extension, fileformat_help ) VALUES ('Read File', 'xxx', 'File format used to relate a read prefix to a library.  Each line in read file specifies <read prefix> <library name>');

--Assembler Pipeline
INSERT INTO pipeline ( pipelinepartition_id, pipeline_name, pipeline_description, pipelinestatus_id )
  VALUES ( ( SELECT pipelinepartition_id FROM pipelinepartition WHERE pipelinepartition_name = 'GlobalPipeline' ),
              'Celera Assembly Pipeline',
              '<p>An assembly pipeline using either the Celera or Mira assemblers.</p>',
           ( SELECT pipelinestatus_id FROM pipelinestatus WHERE pipelinestatus_name = 'Available' )
 );

INSERT INTO globalpipeline ( pipeline_id, globalpipeline_subclass, globalpipeline_image, globalpipeline_layout )
  VALUES ( (SELECT CURRVAL('pipeline_pipeline_id_seq')), 'CeleraAssembly', '/include/img/assembly-pipeline.png',
'<commandSetRoot xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="commandSet.xsd" type="instance">
    <commandSet type="serial">
        <state>incomplete</state>
        <name>start</name>
        <commandSet type="parallel">
            <state>incomplete</state>
           ___SFF Preperation___ 
        </commandSet>
        ___Assembly Step___
        ___Hawkeye Step___
    </commandSet>
</commandSetRoot>
'
 );

INSERT INTO clusterinput ( filetype_id, clusterinput_dependency, fileformat_id, clusterinput_ergatisformat, clusterinput_name, clusterinput_defaultvalue)
  VALUES (
    (SELECT filetype_id FROM filetype WHERE filetype_name = 'Native 454 format'), 'Required',
    (SELECT fileformat_id FROM fileformat WHERE fileformat_name = 'SFF'),
    'File List',
    'Celera_Input',
    '');

INSERT INTO pipelineinput (clusterinput_id, pipeline_id)
  VALUES (
    (SELECT clusterinput_id FROM clusterinput WHERE clusterinput_name = 'Celera_Input'),
    (SELECT pipeline_id FROM pipeline WHERE pipeline_name = 'Celera Assembly Pipeline'));

--Cluster info
---- SFF Preperation
INSERT INTO cluster ( cluster_name, cluster_description, cluster_layoutxml ) VALUES ( 'SFF Preperation', 
'The SFF Preperation cluster prepares SFF files for the assembler by converting them to FRG files.',
'___sff_to_CA.default___ ' );
---- Assembly Step
INSERT INTO cluster ( cluster_name, cluster_description, cluster_layoutxml ) VALUES ( 'Assembly Step', 
'Assembly is performed using either the Celera or Mira assembler.',
'<commandSet type="serial">
            <state>incomplete</state>
            ___create_spec_file.default___
        </commandSet>
        <commandSet type="serial">
            <state>incomplete</state>
            ___celera-assembler.default___
        </commandSet>
');
---- Celera2Hawkeye
INSERT INTO cluster ( cluster_name, cluster_description, cluster_layoutxml ) VALUES ( 'Hawkeye Step', 
'The Celera to Hawkeye cluster prepares celera-assembler output for Hawkeye.',
' <commandSet type="serial">
    <state>incomplete</state>
    ___celera2hawkeye.default___ 
  </commandSet>
' );

-- Component Template
INSERT INTO componenttemplate ( componenttemplate_name, componenttemplate_formpath ) VALUES ( 'sff_to_CA', 'sff_To_CA.yaml' );
INSERT INTO componenttemplate ( componenttemplate_name, componenttemplate_formpath ) VALUES ( 'create_spec_file', 'create_spec_file.yaml' );
INSERT INTO componenttemplate ( componenttemplate_name, componenttemplate_formpath ) VALUES ( 'celera-assembler', '' );
INSERT INTO componenttemplate ( componenttemplate_name, componenttemplate_formpath ) VALUES ( 'celera2hawkeye', '' );

-- Component info
INSERT INTO component ( component_ergatisname, component_name, component_index, cluster_id, componenttemplate_id )
  VALUES ( 'sff_to_CA.default', 'sff to CA Conversion', 1,
  (SELECT cluster_id FROM cluster WHERE cluster_name = 'SFF Preperation' ), ( SELECT componenttemplate_id FROM componenttemplate WHERE componenttemplate_name = 'sff_to_CA' ));

INSERT INTO clusterinput ( filetype_id, clusterinput_dependency, fileformat_id, clusterinput_ergatisformat, clusterinput_name, clusterinput_defaultvalue)
  VALUES (
    (SELECT filetype_id FROM filetype WHERE filetype_name = 'Native 454 format'), 'Required',
    (SELECT fileformat_id FROM fileformat WHERE fileformat_name = 'SFF'),
    'File List',
    'SFF_Preperation_Input',
    '');

INSERT INTO componentinputmap ( component_id, clusterinput_id) VALUES (
    (SELECT component_id FROM component WHERE component_ergatisname = 'sff_to_CA.default' ),
    (SELECT clusterinput_id FROM clusterinput WHERE clusterinput_name = 'SFF_Preperation_Input' ) );

INSERT INTO componentinputmap ( component_id, clusterinput_id) VALUES (
    (SELECT component_id FROM component WHERE component_ergatisname = 'sff_to_CA.default' ),
    (SELECT clusterinput_id FROM clusterinput WHERE clusterinput_name = 'Celera_Input' ) );

INSERT INTO clusteroutput ( component_id, filetype_id, fileformat_id, clusteroutput_ergatisformat, outputvisibility_name, clusteroutput_fileloc)
  VALUES (
    (SELECT component_id FROM component WHERE component_ergatisname = 'sff_to_CA.default'),
    (SELECT filetype_id FROM filetype WHERE filetype_name = 'Celera Assembler native format'),
    (SELECT fileformat_id FROM fileformat WHERE fileformat_name = 'FRG'),
    'File List', 'Evidence', 'sff_to_CA/___id____default___iteration___/sff_to_CA.frg.list');


INSERT INTO component ( component_ergatisname, component_name, component_index, cluster_id, componenttemplate_id )
  VALUES ( 'create_spec_file.default', 'Spec File Creation', 1,
  (SELECT cluster_id FROM cluster WHERE cluster_name = 'Assembly Step' ), ( SELECT componenttemplate_id FROM componenttemplate WHERE componenttemplate_name = 'create_spec_file' ));

INSERT INTO clusterinput ( filetype_id, clusterinput_dependency, fileformat_id, clusterinput_ergatisformat, clusterinput_name, clusterinput_defaultvalue)
  VALUES (
    (SELECT filetype_id FROM filetype WHERE filetype_name = 'Celera Assembler native format'), 'Required',
    (SELECT fileformat_id FROM fileformat WHERE fileformat_name = 'FRG'),
    'File List',
    'FRG_Input',
    '');

INSERT INTO componentinputmap ( component_id, clusterinput_id) VALUES (
    (SELECT component_id FROM component WHERE component_ergatisname = 'create_spec_file.default' ),
    (SELECT clusterinput_id FROM clusterinput WHERE clusterinput_name = 'FRG_Input' ) );

INSERT INTO component ( component_ergatisname, component_name, component_index, cluster_id, componenttemplate_id )
  VALUES ( 'celera-assembler.default', 'Celera Assembler', 2,
  (SELECT cluster_id FROM cluster WHERE cluster_name = 'Assembly Step' ), ( SELECT componenttemplate_id FROM componenttemplate WHERE componenttemplate_name = 'celera-assembler' ));

INSERT INTO clusteroutput ( component_id, filetype_id, fileformat_id, clusteroutput_ergatisformat, outputvisibility_name, clusteroutput_fileloc)
  VALUES (
    (SELECT component_id FROM component WHERE component_ergatisname = 'celera-assembler.default'),
    (SELECT filetype_id FROM filetype WHERE filetype_name = 'Celera Assembler Output'),
    (SELECT fileformat_id FROM fileformat WHERE fileformat_name = 'ASM'),
    'File List', 'Pipeline', 'celera-assembler/___id____default/celera-assembler.asm.list');

INSERT INTO clusteroutput ( component_id, filetype_id, fileformat_id, clusteroutput_ergatisformat, outputvisibility_name, clusteroutput_fileloc)
  VALUES (
    (SELECT component_id FROM component WHERE component_ergatisname = 'celera-assembler.default'),
    (SELECT filetype_id FROM filetype WHERE filetype_name = 'Celera Assembler Output'),
    (SELECT fileformat_id FROM fileformat WHERE fileformat_name = 'QC'),
    'File List', 'Evidence', 'celera-assembler/___id____default/celera-assembler.qc.list');

INSERT INTO clusteroutput ( component_id, filetype_id, fileformat_id, clusteroutput_ergatisformat, outputvisibility_name, clusteroutput_fileloc)
  VALUES (
    (SELECT component_id FROM component WHERE component_ergatisname = 'celera-assembler.default'),
    (SELECT filetype_id FROM filetype WHERE filetype_name = 'Genome Sequence'),
    (SELECT fileformat_id FROM fileformat WHERE fileformat_name = 'FASTA'),
    'File', 'Pipeline', 'celera-assembler/___id____default/i1/g1/celera/9-terminator/celera.scf.fasta');

INSERT INTO component ( component_ergatisname, component_name, component_index, cluster_id, componenttemplate_id )
  VALUES ( 'celera2hawkeye.default', 'Celera to Hawkeye', 1,
  (SELECT cluster_id FROM cluster WHERE cluster_name = 'Hawkeye Step' ), ( SELECT componenttemplate_id FROM componenttemplate WHERE componenttemplate_name = 'celera2hawkeye' ));

INSERT INTO clusterinput ( filetype_id, clusterinput_dependency, fileformat_id, clusterinput_ergatisformat, clusterinput_name, clusterinput_defaultvalue)
  VALUES (
    (SELECT filetype_id FROM filetype WHERE filetype_name = 'Celera Assembler Output'), 'Required',
    (SELECT fileformat_id FROM fileformat WHERE fileformat_name = 'ASM'),
    'File',
    'ASM_Input',
    '$;REPOSITORY_ROOT$;/output_repository/celera-assembler/$;PIPELINEID$;_default/i1/g1/$;PROJECT_NAME$;/$;PROJECT_NAME$;.asm');

INSERT INTO componentinputmap ( component_id, clusterinput_id) VALUES (
    (SELECT component_id FROM component WHERE component_ergatisname = 'celera2hawkeye.default' ),
    (SELECT clusterinput_id FROM clusterinput WHERE clusterinput_name = 'ASM_Input' ) );


INSERT INTO componentinputmap ( component_id, clusterinput_id) VALUES (
    (SELECT component_id FROM component WHERE component_ergatisname = 'celera2hawkeye.default' ),
    (SELECT clusterinput_id FROM clusterinput WHERE clusterinput_name = 'FRG_Input' ) );

INSERT INTO clusteroutput ( component_id, filetype_id, fileformat_id, clusteroutput_ergatisformat, outputvisibility_name, clusteroutput_fileloc)
  VALUES (
    (SELECT component_id FROM component WHERE component_ergatisname = 'celera2hawkeye.default'),
    (SELECT filetype_id FROM filetype WHERE filetype_name = 'Hawkeye Input'),
    (SELECT fileformat_id FROM fileformat WHERE fileformat_name = 'Amos Bank'),
    'Directory', 'Evidence', 'celera2hawkeye/___id____default/celera.bnk');

-- Workflow inserts
INSERT INTO workflow ( pipeline_id, cluster_id, workflow_coordinates, workflow_isrequired )
  VALUES (
    (SELECT pipeline_id FROM pipeline WHERE pipeline_name = 'Celera Assembly Pipeline'),
    (SELECT cluster_id FROM cluster WHERE cluster_name = 'SFF Preperation'), '100,0,241,53', FALSE);

INSERT INTO workflow ( pipeline_id, cluster_id, workflow_coordinates, workflow_isrequired )
  VALUES (
    (SELECT pipeline_id FROM pipeline WHERE pipeline_name = 'Celera Assembly Pipeline'),
    (SELECT cluster_id FROM cluster WHERE cluster_name = 'Assembly Step'), '95,139,244,192', TRUE);

INSERT INTO workflow ( pipeline_id, cluster_id, workflow_coordinates, workflow_isrequired )
  VALUES (
    (SELECT pipeline_id FROM pipeline WHERE pipeline_name = 'Celera Assembly Pipeline'),
    (SELECT cluster_id FROM cluster WHERE cluster_name = 'Hawkeye Step'), '96,279,245,333', FALSE);
 
-------------------------------------------------------------------
-------------------------------------------------------------------
-- fix creation time for party
-------------------------------------------------------------------
-------------------------------------------------------------------
ALTER TABLE party ALTER COLUMN party_createdat SET DEFAULT now();

-------------------------------------------------------------------
-------------------------------------------------------------------
-- Correct componenttemplate naming convention error
-------------------------------------------------------------------
-------------------------------------------------------------------
UPDATE componenttemplate SET componenttemplate_formpath = 'bsml2promoterregion.yaml' 
 WHERE componenttemplate_name = 'bsml2promoterregion';

---- NUKEME
-------------------------------------------------------------------
-------------------------------------------------------------------
-- add variable for pipeline_quota
-------------------------------------------------------------------
-------------------------------------------------------------------
INSERT INTO variable (variable_name, variable_value) VALUES ('pipeline_quota', '3');
----

-------------------------------------------------------------------
-------------------------------------------------------------------
-- add notification webapp
-------------------------------------------------------------------
INSERT INTO usecase (usecase_name, usecase_action, usecase_requireslogin) VALUES ('/submit/Account/OutageNotification', 'Account::OutageNotification', TRUE);

-------------------------------------------------------------------
-------------------------------------------------------------------
-- Add usecase for Hawkeye
-------------------------------------------------------------------
-------------------------------------------------------------------
INSERT INTO usecase (usecase_name, usecase_title, usecase_requireslogin, usecase_stylesheet) VALUES ('/WorkBench/NewblerToHawkeye', 'Newbler To Hawkeye', TRUE, '2columnright');
INSERT INTO usecase (usecase_name, usecase_action, usecase_requireslogin) VALUES ('/submit/WorkBench/NewblerToHawkeye', 'WorkBench::NewblerToHawkeye', TRUE);


INSERT INTO usecase (usecase_name, usecase_title, usecase_requireslogin, usecase_stylesheet) VALUES ('/WorkBench/CeleraToHawkeye', 'Celera To Hawkeye', TRUE, '2columnright');
INSERT INTO usecase (usecase_name, usecase_action, usecase_requireslogin) VALUES ('/submit/WorkBench/CeleraToHawkeye', 'WorkBench::CeleraToHawkeye', TRUE);

INSERT INTO usecase (usecase_name, usecase_title, usecase_requireslogin, usecase_stylesheet) VALUES ('/WorkBench/MiraToHawkeye', 'Mira To Hawkeye', TRUE, '2columnright');
INSERT INTO usecase (usecase_name, usecase_action, usecase_requireslogin) VALUES ('/submit/WorkBench/MiraToHawkeye', 'WorkBench::MiraToHawkeye', TRUE);

INSERT INTO usecase (usecase_name, usecase_action, usecase_requireslogin) VALUES ('/submit/WorkBench/HawkeyeInputUpload', 'WorkBench::HawkeyeInputUpload', TRUE);
INSERT INTO usecase (usecase_name, usecase_requireslogin) VALUES ('/UploadSuccess', TRUE);


INSERT INTO usecase (usecase_name, usecase_title, usecase_requireslogin, usecase_stylesheet) VALUES ('/WorkBench/Results/Hawkeye', 'Results for Hawkeye', TRUE, '2columnright');

INSERT INTO fileformat ( fileformat_name, fileformat_extension, fileformat_help ) VALUES ('XML', 'xml', 'XML (Extensible Markup Language) is a set of rules for encoding documents electronically. It is defined in the XML 1.0 Specification produced by the W3C and several other related specifications; all are fee-free open standards.');

-------------------------------------------------------------------
-------------------------------------------------------------------
-- Add file types and format for BLAST HTML output
-------------------------------------------------------------------
-------------------------------------------------------------------
INSERT INTO filetype ( filetype_name, filetype_help )
  VALUES ( 'BLAST HTML Result', 'An output produced from the raw blast output formatted in an HTML table.' );

-------------------------------------------------------------------
-------------------------------------------------------------------
-- Add parameters for various inputs
-------------------------------------------------------------------
-------------------------------------------------------------------
ALTER TABLE runbuilderinput ADD COLUMN runbuilderinput_parametermask TEXT;

ALTER TABLE clusterinput ADD COLUMN clusterinput_hasparameters BOOLEAN;
UPDATE clusterinput SET clusterinput_hasparameters = FALSE;
UPDATE clusterinput SET clusterinput_hasparameters = TRUE WHERE clusterinput_name = 'Celera_Input';
ALTER TABLE clusterinput ALTER COLUMN clusterinput_hasparameters SET NOT NULL;

ALTER TABLE clusterinput ADD COLUMN clusterinput_isiterator BOOLEAN;
UPDATE clusterinput SET clusterinput_isiterator = FALSE;
UPDATE clusterinput SET clusterinput_isiterator = TRUE WHERE clusterinput_name = 'Celera_Input';
ALTER TABLE clusterinput ALTER COLUMN clusterinput_isiterator SET NOT NULL;

-------------------------------------------------------------------
-------------------------------------------------------------------
-- Add use case for removing run builder inputs 
-------------------------------------------------------------------
-------------------------------------------------------------------
INSERT INTO usecase (usecase_name, usecase_action, usecase_requireslogin) VALUES ('/submit/RunBuilder/RemoveInput', 'RunBuilder::RemoveInput', TRUE);
INSERT INTO usecase (usecase_name, usecase_action, usecase_requireslogin) VALUES ('/submit/RunBuilder/RemoveInputList', 'RunBuilder::RemoveInputList', TRUE);

-------------------------------------------------------------------
-------------------------------------------------------------------
-- Add special cluster class for SFF Preparation
-------------------------------------------------------------------
-------------------------------------------------------------------
UPDATE cluster SET cluster_subclass = 'SFFPreparation' WHERE cluster_name = 'SFF Preperation';

-------------------------------------------------------------------
-------------------------------------------------------------------
-- Add iteration count for run clusters
-------------------------------------------------------------------
-------------------------------------------------------------------
ALTER TABLE runcluster ADD COLUMN runcluster_iterations INTEGER;

-------------------------------------------------------------------
-------------------------------------------------------------------
-- Add iterates on column for clusters
-------------------------------------------------------------------
-------------------------------------------------------------------
ALTER TABLE cluster ADD COLUMN clusterinput_id INTEGER REFERENCES clusterinput(clusterinput_id);

UPDATE cluster SET clusterinput_id = ( SELECT clusterinput_id FROM clusterinput WHERE clusterinput_name = 'Celera_Input') WHERE cluster_name = 'SFF Preperation';

-------------------------------------------------------------------
-------------------------------------------------------------------
-- Add usecase for Browsing All Jobs
-------------------------------------------------------------------
-------------------------------------------------------------------
INSERT INTO usecase (usecase_name, usecase_title, usecase_requireslogin, usecase_stylesheet) VALUES ('/WorkBench/BrowseMy', 'Browse Jobs', TRUE, '2columnright');

-------------------------------------------------------------------
-------------------------------------------------------------------
-- Add is_binary column to file formats
-------------------------------------------------------------------
-------------------------------------------------------------------
ALTER TABLE fileformat ADD COLUMN fileformat_isbinary BOOLEAN;
UPDATE fileformat SET fileformat_isbinary = FALSE;
ALTER TABLE fileformat ALTER COLUMN fileformat_isbinary SET NOT NULL;
UPDATE fileformat SET fileformat_isbinary = TRUE WHERE fileformat_name = 'SFF';

-------------------------------------------------------------------
-------------------------------------------------------------------
-- Add Account View for admins
-------------------------------------------------------------------
-------------------------------------------------------------------
INSERT INTO usecase (usecase_name, usecase_title, usecase_requireslogin, usecase_stylesheet) VALUES ('/Account/View', 'Account View', TRUE, '2columnright');
INSERT INTO accountgroup ( accountgroup_name, accountgroup_description ) VALUES ( 'Account Administrators', 'Administrator of ISGA Accounts' );
INSERT INTO grouppermission ( accountgroup_id, usecase_id ) 
  VALUES ( (SELECT accountgroup_id FROM accountgroup WHERE accountgroup_name = 'Account Administrators'), (SELECT usecase_id FROM usecase WHERE usecase_name = '/Account/View') );

-------------------------------------------------------------------
-------------------------------------------------------------------
-- Add Usecase for NewblerForConsed
-------------------------------------------------------------------
-------------------------------------------------------------------
INSERT INTO usecase (usecase_name, usecase_title, usecase_requireslogin, usecase_stylesheet) VALUES ('/WorkBench/NewblerForConsed', 'Newbler Scaffold For Consed', TRUE, '2columnright');
INSERT INTO usecase (usecase_name, usecase_action, usecase_requireslogin) VALUES ('/submit/WorkBench/NewblerScaffold4Consed', 'WorkBench::NewblerScaffold4Consed', TRUE);

INSERT INTO usecase (usecase_name, usecase_title, usecase_requireslogin, usecase_stylesheet) VALUES ('/WorkBench/Results/NewblerForConsed', 'Results for Consed', TRUE, '2columnright');

-------------------------------------------------------------------
-------------------------------------------------------------------
-- Add New JobTypes
-------------------------------------------------------------------
-------------------------------------------------------------------

INSERT INTO jobtype ( jobtype_name, jobtype_class ) VALUES ( 'Hawkeye', 'ISGA::Job::Hawkeye' );
INSERT INTO jobtype ( jobtype_name, jobtype_class ) VALUES ( 'Consed', 'ISGA::Job::Consed' );

INSERT INTO filetype ( filetype_name, filetype_help )
  VALUES ( 'Consed Input', 'A modified ace file for use in Consed.' );

-------------------------------------------------------------------
-------------------------------------------------------------------
-- Modify Run Input to preserve parameter mask
-------------------------------------------------------------------
-------------------------------------------------------------------
ALTER TABLE runinput ADD COLUMN runinput_id SERIAL;

ALTER TABLE runinput ADD COLUMN pipelineinput_id INTEGER REFERENCES pipelineinput(pipelineinput_id);

UPDATE runinput SET pipelineinput_id = b.pipelineinput_id FROM pipelineinput b, run c
WHERE runinput.run_id = c.run_id AND b.pipeline_id = c.pipeline_id;

ALTER TABLE runinput ALTER COLUMN pipelineinput_id SET NOT NULL;

ALTER TABLE runinput ADD COLUMN runinput_parametermask TEXT;

-------------------------------------------------------------------
-------------------------------------------------------------------
-- Delete sample data from usecase table
-------------------------------------------------------------------
-------------------------------------------------------------------
DELETE FROM usecase WHERE usecase_name = '/sample_data.fna';
DELETE FROM usecase WHERE usecase_name = '/sample_data.predict';
DELETE FROM usecase WHERE usecase_name = '/nucleotide_blast_sample.fna';
DELETE FROM usecase WHERE usecase_name = '/amino_acid_blast_sample.fsa';

-------------------------------------------------------------------
-------------------------------------------------------------------
-- Add UserClass table
-------------------------------------------------------------------
-------------------------------------------------------------------
CREATE TABLE userclass (
  userclass_id SERIAL PRIMARY KEY,
  userclass_name TEXT NOT NULL UNIQUE,
  userclass_description TEXT NOT NULL
);

INSERT INTO userclass ( userclass_name, userclass_description ) VALUES (
  'Default User', 'A default class for simple ISGA installations.' );

-------------------------------------------------------------------
-------------------------------------------------------------------
-- Add UserClass to Accounts
-------------------------------------------------------------------
-------------------------------------------------------------------
ALTER TABLE account ADD COLUMN userclass_id INTEGER REFERENCES userclass(userclass_id);
UPDATE account SET userclass_id = (SELECT userclass_id FROM userclass
   WHERE userclass_name = 'Default User');
ALTER TABLE account ALTER COLUMN userclass_id SET NOT NULL;

-------------------------------------------------------------------
-------------------------------------------------------------------
-- Add unique constraints to grouppermission map table
-------------------------------------------------------------------
-------------------------------------------------------------------
ALTER TABLE grouppermission ADD CONSTRAINT grouppermission_pk UNIQUE (accountgroup_id, usecase_id);

-------------------------------------------------------------------
-------------------------------------------------------------------
-- Add Administrative UseCases
-------------------------------------------------------------------
-------------------------------------------------------------------
INSERT INTO accountgroup ( accountgroup_name, accountgroup_description ) 
  VALUES ( 'Policy Administrators', 'Administrator of Site Policies' );

INSERT INTO usecase (usecase_name, usecase_title, usecase_requireslogin, usecase_stylesheet) VALUES (
  '/UserClass/View', 'UserClass View', TRUE, '2columnright');
INSERT INTO usecase (usecase_name, usecase_title, usecase_requireslogin, usecase_stylesheet) VALUES (
  '/UserClass/List', 'UserClass List', TRUE, '2columnright');
INSERT INTO usecase (usecase_name, usecase_title, usecase_requireslogin, usecase_stylesheet) VALUES (
  '/UserClass/Add', 'UserClass Add', TRUE, '2columnright');
INSERT INTO usecase (usecase_name, usecase_title, usecase_requireslogin, usecase_stylesheet) VALUES (
  '/UserClass/Edit', 'UserClass Edit', TRUE, '2columnright');

INSERT INTO usecase (usecase_name, usecase_action, usecase_requireslogin) VALUES ('/submit/UserClass/Add', 'UserClass::Add', TRUE);
INSERT INTO usecase (usecase_name, usecase_action, usecase_requireslogin) VALUES ('/submit/UserClass/Edit', 'UserClass::Edit', TRUE);

INSERT INTO grouppermission ( accountgroup_id, usecase_id ) 
  VALUES ( (SELECT accountgroup_id FROM accountgroup WHERE accountgroup_name = 'Policy Administrators'), 
           (SELECT usecase_id FROM usecase WHERE usecase_name = '/UserClass/View') );
INSERT INTO grouppermission ( accountgroup_id, usecase_id ) 
  VALUES ( (SELECT accountgroup_id FROM accountgroup WHERE accountgroup_name = 'Policy Administrators'), 
           (SELECT usecase_id FROM usecase WHERE usecase_name = '/UserClass/List') );
INSERT INTO grouppermission ( accountgroup_id, usecase_id ) 
  VALUES ( (SELECT accountgroup_id FROM accountgroup WHERE accountgroup_name = 'Policy Administrators'), 
           (SELECT usecase_id FROM usecase WHERE usecase_name = '/UserClass/Add') );
INSERT INTO grouppermission ( accountgroup_id, usecase_id ) 
  VALUES ( (SELECT accountgroup_id FROM accountgroup WHERE accountgroup_name = 'Policy Administrators'), 
           (SELECT usecase_id FROM usecase WHERE usecase_name = '/UserClass/Edit') );
INSERT INTO grouppermission ( accountgroup_id, usecase_id ) 
  VALUES ( (SELECT accountgroup_id FROM accountgroup WHERE accountgroup_name = 'Policy Administrators'), 
           (SELECT usecase_id FROM usecase WHERE usecase_name = '/submit/UserClass/Add') );
INSERT INTO grouppermission ( accountgroup_id, usecase_id ) 
  VALUES ( (SELECT accountgroup_id FROM accountgroup WHERE accountgroup_name = 'Policy Administrators'), 
           (SELECT usecase_id FROM usecase WHERE usecase_name = '/submit/UserClass/Edit') );

-------------------------------------------------------------------
-------------------------------------------------------------------
-- Add Site Configuration
-------------------------------------------------------------------
-------------------------------------------------------------------
INSERT INTO usecase (usecase_name, usecase_title, usecase_requireslogin, usecase_stylesheet) VALUES (
  '/SiteConfiguration/View', 'Site Configuration', TRUE, '2columnright');
INSERT INTO usecase (usecase_name, usecase_title, usecase_requireslogin, usecase_stylesheet) VALUES (
  '/SiteConfiguration/Edit', 'Site Configuration Edit', TRUE, '2columnright');
INSERT INTO usecase (usecase_name, usecase_action, usecase_requireslogin) VALUES ('/submit/SiteConfiguration/Edit', 'SiteConfiguration::Edit', TRUE);

INSERT INTO grouppermission ( accountgroup_id, usecase_id ) 
  VALUES ( (SELECT accountgroup_id FROM accountgroup WHERE accountgroup_name = 'Policy Administrators'), 
           (SELECT usecase_id FROM usecase WHERE usecase_name = '/SiteConfiguration/View') );
INSERT INTO grouppermission ( accountgroup_id, usecase_id ) 
  VALUES ( (SELECT accountgroup_id FROM accountgroup WHERE accountgroup_name = 'Policy Administrators'), 
           (SELECT usecase_id FROM usecase WHERE usecase_name = '/SiteConfiguration/Edit') );
INSERT INTO grouppermission ( accountgroup_id, usecase_id ) 
  VALUES ( (SELECT accountgroup_id FROM accountgroup WHERE accountgroup_name = 'Policy Administrators'), 
           (SELECT usecase_id FROM usecase WHERE usecase_name = '/submit/SiteConfiguration/Edit') );

INSERT INTO usecase (usecase_name, usecase_title, usecase_requireslogin, usecase_stylesheet) VALUES (
  '/PipelineConfiguration/View', 'Site Configuration', TRUE, '2columnright');
INSERT INTO usecase (usecase_name, usecase_title, usecase_requireslogin, usecase_stylesheet) VALUES (
  '/PipelineConfiguration/Edit', 'Site Configuration Edit', TRUE, '2columnright');
INSERT INTO usecase (usecase_name, usecase_action, usecase_requireslogin) VALUES ('/submit/PipelineConfiguration/Edit', 'PipelineConfiguration::Edit', TRUE);

INSERT INTO grouppermission ( accountgroup_id, usecase_id ) 
  VALUES ( (SELECT accountgroup_id FROM accountgroup WHERE accountgroup_name = 'Policy Administrators'), 
           (SELECT usecase_id FROM usecase WHERE usecase_name = '/PipelineConfiguration/View') );
INSERT INTO grouppermission ( accountgroup_id, usecase_id ) 
  VALUES ( (SELECT accountgroup_id FROM accountgroup WHERE accountgroup_name = 'Policy Administrators'), 
           (SELECT usecase_id FROM usecase WHERE usecase_name = '/PipelineConfiguration/Edit') );
INSERT INTO grouppermission ( accountgroup_id, usecase_id ) 
  VALUES ( (SELECT accountgroup_id FROM accountgroup WHERE accountgroup_name = 'Policy Administrators'), 
           (SELECT usecase_id FROM usecase WHERE usecase_name = '/submit/PipelineConfiguration/Edit') );

INSERT INTO usecase (usecase_name, usecase_title, usecase_requireslogin, usecase_stylesheet) VALUES (
  '/UserClassConfiguration/View', 'Site Configuration', TRUE, '2columnright');
INSERT INTO usecase (usecase_name, usecase_title, usecase_requireslogin, usecase_stylesheet) VALUES (
  '/UserClassConfiguration/Edit', 'Site Configuration Edit', TRUE, '2columnright');
INSERT INTO usecase (usecase_name, usecase_action, usecase_requireslogin) VALUES ('/submit/UserClassConfiguration/Edit', 'UserClassConfiguration::Edit', TRUE);

INSERT INTO grouppermission ( accountgroup_id, usecase_id ) 
  VALUES ( (SELECT accountgroup_id FROM accountgroup WHERE accountgroup_name = 'Policy Administrators'), 
           (SELECT usecase_id FROM usecase WHERE usecase_name = '/UserClassConfiguration/View') );
INSERT INTO grouppermission ( accountgroup_id, usecase_id ) 
  VALUES ( (SELECT accountgroup_id FROM accountgroup WHERE accountgroup_name = 'Policy Administrators'), 
           (SELECT usecase_id FROM usecase WHERE usecase_name = '/UserClassConfiguration/Edit') );
INSERT INTO grouppermission ( accountgroup_id, usecase_id ) 
  VALUES ( (SELECT accountgroup_id FROM accountgroup WHERE accountgroup_name = 'Policy Administrators'), 
           (SELECT usecase_id FROM usecase WHERE usecase_name = '/submit/UserClassConfiguration/Edit') );

CREATE TABLE datatype ( datatype_name TEXT PRIMARY KEY );
INSERT INTO datatype VALUES ( 'boolean' );
INSERT INTO datatype VALUES ( 'string' );
INSERT INTO datatype VALUES ( 'url' );
INSERT INTO datatype VALUES ( 'path' );
INSERT INTO datatype VALUES ( 'integer' );
INSERT INTO datatype VALUES ( 'number' );
INSERT INTO datatype VALUES ( 'date' );
INSERT INTO datatype VALUES ( 'timestamp' );
INSERT INTO datatype VALUES ( 'duration' );
INSERT INTO datatype VALUES ( 'IndexedObject' );

CREATE TABLE configurationtype ( configurationtype_name TEXT PRIMARY KEY );
INSERT INTO configurationtype (configurationtype_name) VALUES ('SiteConfiguration');
INSERT INTO configurationtype (configurationtype_name) VALUES ('PipelineConfiguration');
INSERT INTO configurationtype (configurationtype_name) VALUES ('ToolConfiguration');
INSERT INTO configurationtype (configurationtype_name) VALUES ('UserClassConfiguration');

CREATE TABLE configurationvariable (
  configurationvariable_id SERIAL PRIMARY KEY,
  configurationvariable_name TEXT NOT NULL,
  configurationvariable_type TEXT REFERENCES configurationtype(configurationtype_name) NOT NULL,
  configurationvariable_form TEXT NOT NULL,
  configurationvariable_description TEXT NOT NULL,
  configurationvariable_datatype TEXT REFERENCES datatype(datatype_name) NOT NULL,
  CONSTRAINT configurationvariable_k UNIQUE (configurationvariable_id, configurationvariable_type),
  CONSTRAINT configurationvariable_k2 UNIQUE (configurationvariable_type, configurationvariable_name)
);

CREATE TABLE siteconfiguration (
  siteconfiguration_id SERIAL PRIMARY KEY,
  configurationvariable_id INTEGER REFERENCES configurationvariable(configurationvariable_id) NOT NULL UNIQUE,
  siteconfiguration_type TEXT REFERENCES configurationtype(configurationtype_name) NOT NULL DEFAULT 'SiteConfiguration',
  siteconfiguration_value TEXT NOT NULL,
  FOREIGN KEY (configurationvariable_id, siteconfiguration_type) REFERENCES configurationvariable(configurationvariable_id, configurationvariable_type),
  CHECK ( siteconfiguration_type = 'SiteConfiguration' )
);

-- allow_sge_requests
INSERT INTO configurationvariable
 (configurationvariable_type, configurationvariable_datatype, configurationvariable_name, configurationvariable_form, configurationvariable_description) 
 VALUES ( 'SiteConfiguration', 'boolean', 'allow_sge_requests',
          '---
templ: select
NAME: allow_sge_requests
TITLE: allow_sge_requests
REQUIRED: 1
OPTION: [ TRUE, FALSE ]
ERROR: [ [''Number::matches'', 0, 1] ]
OPT_VAL: [ 1,0]
', 
	  'Determines if users can submit new pipelines and tool box jobs requiring Sun Grid Engine.');

INSERT INTO siteconfiguration ( configurationvariable_id, siteconfiguration_value ) VALUES (
 (SELECT configurationvariable_id FROM configurationvariable WHERE configurationvariable_name = 'allow_sge_requests'),
 '1');

-- default_user_class
INSERT INTO configurationvariable
 (configurationvariable_type, configurationvariable_datatype, configurationvariable_name, configurationvariable_form, configurationvariable_description) 
 VALUES ( 'SiteConfiguration', 'string', 'default_user_class',
 	  '---
NAME: default_user_class
REQUIRED: 1
ERROR: [ [''Object::existsByName'', ''ISGA::UserClass''] ]
',
	  'Determines what user class accounts will have when first requested.');

INSERT INTO siteconfiguration ( configurationvariable_id, siteconfiguration_value ) VALUES (
 (SELECT configurationvariable_id FROM configurationvariable WHERE configurationvariable_name = 'default_user_class'),
 'Default User');



-- new site configurations
--INSERT INTO configurationvariable
-- (configurationvariable_type, configurationvariable_datatype, configurationvariable_name, configurationvariable_form, configurationvariable_description) 
-- VALUES ( 'SiteConfiguration', '', '',
-- 	  '---
--',
--	  '');

--INSERT INTO siteconfiguration ( configurationvariable_id, siteconfiguration_value ) VALUES (
-- (SELECT configurationvariable_id FROM configurationvariable WHERE configurationvariable_name = 'allow_sge_requests'),
-- '1');


CREATE TABLE pipelineconfiguration (
  pipelineconfiguration_id SERIAL PRIMARY KEY,
  configurationvariable_id INTEGER REFERENCES configurationvariable(configurationvariable_id) NOT NULL,
  pipeline_id INTEGER REFERENCES globalpipeline(pipeline_id) NOT NULL,
  userclass_id INTEGER REFERENCES userclass(userclass_id),
  pipelineconfiguration_type TEXT REFERENCES configurationtype(configurationtype_name) NOT NULL DEFAULT 'PipelineConfiguration',
  pipelineconfiguration_value TEXT NOT NULL,
  CONSTRAINT pipelineconfiguration_k UNIQUE (configurationvariable_id, pipeline_id, userclass_id)
);

-- pipeline availability
INSERT INTO configurationvariable
 (configurationvariable_type, configurationvariable_datatype, configurationvariable_name, configurationvariable_form, configurationvariable_description) 
 VALUES ( 'PipelineConfiguration', 'boolean', 'pipeline_is_installed',
 	  '---
templ: select
NAME: pipeline_is_installed
TITLE: pipeline_is_installed
REQUIRED: 1
OPTION: [ TRUE, FALSE ]
ERROR: [ [''Number::matches'', 0, 1] ]
OPT_VAL: [1,0]
',
	  'Determines if this pipeline is installed as part of ISGA and available for use.');

INSERT INTO pipelineconfiguration (configurationvariable_id, pipeline_id, pipelineconfiguration_value) VALUES (
 (SELECT configurationvariable_id FROM configurationvariable WHERE configurationvariable_name = 'pipeline_is_installed'),
 (SELECT pipeline_id FROM pipeline WHERE pipelinepartition_id = (SELECT pipelinepartition_id FROM pipelinepartition WHERE pipelinepartition_name = 'GlobalPipeline')
  AND pipeline_name = 'Celera Assembly Pipeline' ),
  '1');

INSERT INTO pipelineconfiguration (configurationvariable_id, pipeline_id, pipelineconfiguration_value) VALUES (
 (SELECT configurationvariable_id FROM configurationvariable WHERE configurationvariable_name = 'pipeline_is_installed'),
 (SELECT pipeline_id FROM pipeline WHERE pipelinepartition_id = (SELECT pipelinepartition_id FROM pipelinepartition WHERE pipelinepartition_name = 'GlobalPipeline')
  AND pipeline_name = 'Prokaryotic Annotation Pipeline' ),
  '1');


--INSERT INTO configurationvariable
-- (configurationvariable_type, configurationvariable_datatype, configurationvariable_name, configurationvariable_form, configurationvariable_description) 
-- VALUES ( 'PipelineConfiguration', '', '',
-- 	  '---
--',
--	  '');
--INSERT INTO pipelineconfiguration (configurationvariable_id, pipeline_id, pipelineconfiguration_value) VALUES (
-- (SELECT configurationvariable_id FROM configurationvariable WHERE configurationvariable_name = ''),
-- (SELECT pipeline_id FROM pipeline WHERE pipelinepartition_id = (SELECT pipelinepartition_id FROM pipelinepartition WHERE pipelinepartition_name = 'GlobalPipeline')
--  AND pipeline_name = '' ),
--  '');

CREATE TABLE userclassconfiguration (
  userclassconfiguration_id SERIAL PRIMARY KEY,
  configurationvariable_id INTEGER REFERENCES configurationvariable(configurationvariable_id) NOT NULL,
  userclass_id INTEGER REFERENCES userclass(userclass_id) NOT NULL,
  userclassconfiguration_type TEXT REFERENCES configurationtype(configurationtype_name) NOT NULL DEFAULT 'UserClassConfiguration',
  userclassconfiguration_value TEXT NOT NULL,
  CONSTRAINT userclassconfiguration_k UNIQUE (configurationvariable_id, userclass_id)
);

-- raw_data_retention
INSERT INTO configurationvariable
 (configurationvariable_type, configurationvariable_datatype, configurationvariable_name, configurationvariable_form, configurationvariable_description) 
 VALUES ( 'UserClassConfiguration', 'boolean', 'raw_data_retention',
 	  '---
NAME: raw_data_retention
TITLE: raw_data_retention
REQUIRED: 1
ERROR: [ ''digitonly'', ''Number::isPositive'' ]
',
	  'The number of days that pipeline raw output will be retained for this user class before automated cleanup scripts are able to delete it.');

INSERT INTO userclassconfiguration (configurationvariable_id, userclass_id, userclassconfiguration_value) VALUES (
 (SELECT configurationvariable_id FROM configurationvariable WHERE configurationvariable_name = 'raw_data_retention'),
 (SELECT userclass_id FROM userclass WHERE userclass_name = 'Default User'),		      
  '30');	 

-- pipeline_quota
INSERT INTO configurationvariable
 (configurationvariable_type, configurationvariable_datatype, configurationvariable_name, configurationvariable_form, configurationvariable_description) 
 VALUES ( 'UserClassConfiguration', 'boolean', 'pipeline_quota',
 	  '---
NAME: pipeline_quota
TITLE: pipeline_quota
REQUIRED: 1
ERROR: [ ''digitonly'', ''Number::isPositive'' ]
',
	  'The maximum number of running pipelines that a user of this user class may have at one time');

INSERT INTO userclassconfiguration (configurationvariable_id, userclass_id, userclassconfiguration_value) VALUES (
 (SELECT configurationvariable_id FROM configurationvariable WHERE configurationvariable_name = 'pipeline_quota'),
 (SELECT userclass_id FROM userclass WHERE userclass_name = 'Default User'),		      
  '1');

CREATE TABLE toolconfiguration (
  toolconfiguration_id SERIAL PRIMARY KEY,
  configurationvariable_id INTEGER REFERENCES configurationvariable(configurationvariable_id) NOT NULL,
  jobtype_id INTEGER REFERENCES jobtype(jobtype_id) NOT NULL,
  userclass_id INTEGER REFERENCES userclass(userclass_id),
  toolconfiguration_type TEXT REFERENCES configurationtype(configurationtype_name) NOT NULL DEFAULT 'ToolConfiguration',
  toolconfiguration_value TEXT NOT NULL,
  CONSTRAINT toolconfiguration_k UNIQUE (configurationvariable_id, jobtype_id, userclass_id)
);

INSERT INTO configurationvariable
 (configurationvariable_type, configurationvariable_datatype, configurationvariable_name, configurationvariable_form, configurationvariable_description) 
 VALUES ( 'ToolConfiguration', 'boolean', 'tool_is_installed',
 	  '---
templ: select
NAME: tool_is_installed
TITLE: tool_is_installed
REQUIRED: 1
OPTION: [ TRUE, FALSE ]
ERROR: [ [''Number::matches'', 0, 1] ]
OPT_VAL: [1,0]
',
	  'Determines if this tool is installed as part of ISGA and available for use.');

INSERT INTO toolconfiguration (configurationvariable_id, jobtype_id, toolconfiguration_value) VALUES (
  (SELECT configurationvariable_id FROM configurationvariable WHERE configurationvariable_name = 'tool_is_installed'),
 (SELECT jobtype_id FROM jobtype WHERE jobtype_name = 'Blast'),
  '1');
INSERT INTO toolconfiguration (configurationvariable_id, jobtype_id, toolconfiguration_value) VALUES (
  (SELECT configurationvariable_id FROM configurationvariable WHERE configurationvariable_name = 'tool_is_installed'),
 (SELECT jobtype_id FROM jobtype WHERE jobtype_name = 'Hawkeye'),
  '1');
INSERT INTO toolconfiguration (configurationvariable_id, jobtype_id, toolconfiguration_value) VALUES (
  (SELECT configurationvariable_id FROM configurationvariable WHERE configurationvariable_name = 'tool_is_installed'),
 (SELECT jobtype_id FROM jobtype WHERE jobtype_name = 'Consed'),
  '1');


-------------------------------------------------------------------
-------------------------------------------------------------------
-- Will eventually move to DROP variable
-------------------------------------------------------------------
-------------------------------------------------------------------
DROP TABLE variable;


